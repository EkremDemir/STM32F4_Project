
022ESP_Servo_Led_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004710  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca8  08004ca8  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cb0  08004cb0  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cb0  08004cb0  00014cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08004cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002013c  2**0
                  CONTENTS
 10 .bss          00000674  2000013c  2000013c  0002013c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007b0  200007b0  0002013c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9e3  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b3a  00000000  00000000  0002db4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b68  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e05  00000000  00000000  00030df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbc7  00000000  00000000  00051bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae26  00000000  00000000  0005f7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a5ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003710  00000000  00000000  0012a63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004888 	.word	0x08004888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000140 	.word	0x20000140
 80001cc:	08004888 	.word	0x08004888

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SysTick_Handler>:
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart1;

void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000588:	f000 ff3a 	bl	8001400 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800058c:	f001 f88d 	bl	80016aa <HAL_SYSTICK_IRQHandler>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <TIM2_IRQHandler+0x10>)
 800059a:	f002 f88b 	bl	80026b4 <HAL_TIM_IRQHandler>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000158 	.word	0x20000158

080005a8 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <USART1_IRQHandler+0x10>)
 80005ae:	f002 fdc9 	bl	8003144 <HAL_UART_IRQHandler>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200001e4 	.word	0x200001e4

080005bc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <USART2_IRQHandler+0x10>)
 80005c2:	f002 fdbf 	bl	8003144 <HAL_UART_IRQHandler>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200001a0 	.word	0x200001a0

080005d0 <main>:
uint8_t *temp = NULL;

uint16_t i;
uint16_t angle;
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

	HAL_Init();
 80005d4:	f000 fec2 	bl	800135c <HAL_Init>
	SystemClock_Config();
 80005d8:	f000 f834 	bl	8000644 <SystemClock_Config>
	GPIO_Init();
 80005dc:	f000 f89c 	bl	8000718 <GPIO_Init>

	TIMER2_Init();
 80005e0:	f000 f8c2 	bl	8000768 <TIMER2_Init>

	UART2_Init();
 80005e4:	f000 f8fa 	bl	80007dc <UART2_Init>
	UART1_Init();
 80005e8:	f000 f91e 	bl	8000828 <UART1_Init>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005ec:	2100      	movs	r1, #0
 80005ee:	480f      	ldr	r0, [pc, #60]	; (800062c <main+0x5c>)
 80005f0:	f001 ff98 	bl	8002524 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005f4:	2104      	movs	r1, #4
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <main+0x5c>)
 80005f8:	f001 ff94 	bl	8002524 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart1,(uint8_t*)TempRx, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	490c      	ldr	r1, [pc, #48]	; (8000630 <main+0x60>)
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <main+0x64>)
 8000602:	f002 fd6e 	bl	80030e2 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x68>)
 8000608:	f7ff fde2 	bl	80001d0 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29b      	uxth	r3, r3
 8000610:	461a      	mov	r2, r3
 8000612:	4909      	ldr	r1, [pc, #36]	; (8000638 <main+0x68>)
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <main+0x6c>)
 8000616:	f002 fd1f 	bl	8003058 <HAL_UART_Transmit_IT>

	ESP_Init();
 800061a:	f000 f92b 	bl	8000874 <ESP_Init>

	i = 170;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <main+0x70>)
 8000620:	22aa      	movs	r2, #170	; 0xaa
 8000622:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		ESP_Server_Start();
 8000624:	f000 fa86 	bl	8000b34 <ESP_Server_Start>
 8000628:	e7fc      	b.n	8000624 <main+0x54>
 800062a:	bf00      	nop
 800062c:	20000158 	.word	0x20000158
 8000630:	20000390 	.word	0x20000390
 8000634:	200001e4 	.word	0x200001e4
 8000638:	20000004 	.word	0x20000004
 800063c:	200001a0 	.word	0x200001a0
 8000640:	20000794 	.word	0x20000794

08000644 <SystemClock_Config>:

	return 0;
}

void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fc94 	bl	8003f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006b8:	23a0      	movs	r3, #160	; 0xa0
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fa43 	bl	8001b54 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
	  Error_handler();
 80006d4:	f000 fd28 	bl	8001128 <Error_handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fca4 	bl	8002044 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
	  Error_handler();
 8000702:	f000 fd11 	bl	8001128 <Error_handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <GPIO_Init>:




void GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <GPIO_Init+0x48>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <GPIO_Init+0x48>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <GPIO_Init+0x48>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef Ledgpio;

	Ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
	Ledgpio.Pin  = GPIO_PIN_12;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	607b      	str	r3, [r7, #4]
	Ledgpio.Speed = GPIO_SPEED_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
	Ledgpio.Pull  = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOD,&Ledgpio);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <GPIO_Init+0x4c>)
 8000752:	f001 f849 	bl	80017e8 <HAL_GPIO_Init>



}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020c00 	.word	0x40020c00

08000768 <TIMER2_Init>:




void TIMER2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef timPWM_init;

	htim2.Instance = TIM2;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <TIMER2_Init+0x70>)
 8000770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000774:	601a      	str	r2, [r3, #0]
	htim2.Init.Period = 3599;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <TIMER2_Init+0x70>)
 8000778:	f640 620f 	movw	r2, #3599	; 0xe0f
 800077c:	60da      	str	r2, [r3, #12]
	htim2.Init.Prescaler = 221;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <TIMER2_Init+0x70>)
 8000780:	22dd      	movs	r2, #221	; 0xdd
 8000782:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000784:	4814      	ldr	r0, [pc, #80]	; (80007d8 <TIMER2_Init+0x70>)
 8000786:	f001 fe7d 	bl	8002484 <HAL_TIM_PWM_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <TIMER2_Init+0x2c>
	{
		Error_handler();
 8000790:	f000 fcca 	bl	8001128 <Error_handler>
	}

	timPWM_init.OCMode = TIM_OCMODE_PWM1;
 8000794:	2360      	movs	r3, #96	; 0x60
 8000796:	607b      	str	r3, [r7, #4]
	timPWM_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]

	timPWM_init.Pulse   = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htim2, &timPWM_init, TIM_CHANNEL_1) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <TIMER2_Init+0x70>)
 80007a8:	f002 f88c 	bl	80028c4 <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <TIMER2_Init+0x4e>
	{
		Error_handler();
 80007b2:	f000 fcb9 	bl	8001128 <Error_handler>
	}

	timPWM_init.Pulse   = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htim2, &timPWM_init, TIM_CHANNEL_2) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2204      	movs	r2, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <TIMER2_Init+0x70>)
 80007c2:	f002 f87f 	bl	80028c4 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <TIMER2_Init+0x68>
	{
		Error_handler();
 80007cc:	f000 fcac 	bl	8001128 <Error_handler>
	}

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000158 	.word	0x20000158

080007dc <UART2_Init>:

void UART2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <UART2_Init+0x44>)
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <UART2_Init+0x48>)
 80007e4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <UART2_Init+0x44>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <UART2_Init+0x44>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits   = UART_STOPBITS_1;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <UART2_Init+0x44>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity     = UART_PARITY_NONE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <UART2_Init+0x44>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <UART2_Init+0x44>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode       = UART_MODE_TX_RX;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <UART2_Init+0x44>)
 8000808:	220c      	movs	r2, #12
 800080a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <UART2_Init+0x44>)
 800080e:	f002 fbd6 	bl	8002fbe <HAL_UART_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <UART2_Init+0x40>
	{
		Error_handler();
 8000818:	f000 fc86 	bl	8001128 <Error_handler>
	}
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200001a0 	.word	0x200001a0
 8000824:	40004400 	.word	0x40004400

08000828 <UART1_Init>:

void UART1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <UART1_Init+0x44>)
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <UART1_Init+0x48>)
 8000830:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <UART1_Init+0x44>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <UART1_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits   = UART_STOPBITS_1;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <UART1_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity     = UART_PARITY_NONE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <UART1_Init+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
	huart1.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <UART1_Init+0x44>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
	huart1.Init.Mode       = UART_MODE_TX_RX;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <UART1_Init+0x44>)
 8000854:	220c      	movs	r2, #12
 8000856:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <UART1_Init+0x44>)
 800085a:	f002 fbb0 	bl	8002fbe <HAL_UART_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <UART1_Init+0x40>
	{
		Error_handler();
 8000864:	f000 fc60 	bl	8001128 <Error_handler>
	}
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001e4 	.word	0x200001e4
 8000870:	40011000 	.word	0x40011000

08000874 <ESP_Init>:


void ESP_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

/***********RESETTING**************************************************/
	sprintf(Tx_Buffer, "AT+RST\r\n"); //Reset the ESP8266
 8000878:	4997      	ldr	r1, [pc, #604]	; (8000ad8 <ESP_Init+0x264>)
 800087a:	4898      	ldr	r0, [pc, #608]	; (8000adc <ESP_Init+0x268>)
 800087c:	f003 fb88 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
 8000880:	4896      	ldr	r0, [pc, #600]	; (8000adc <ESP_Init+0x268>)
 8000882:	f7ff fca5 	bl	80001d0 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29b      	uxth	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	4993      	ldr	r1, [pc, #588]	; (8000adc <ESP_Init+0x268>)
 800088e:	4894      	ldr	r0, [pc, #592]	; (8000ae0 <ESP_Init+0x26c>)
 8000890:	f002 fbe2 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(3000); //Wait 2 second to reset the esp
 8000894:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000898:	f000 fdd2 	bl	8001440 <HAL_Delay>

        /***************INFO***************************/
	sprintf(user_info,"RESETTING\r\n");
 800089c:	4991      	ldr	r1, [pc, #580]	; (8000ae4 <ESP_Init+0x270>)
 800089e:	4892      	ldr	r0, [pc, #584]	; (8000ae8 <ESP_Init+0x274>)
 80008a0:	f003 fb76 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 80008a4:	4890      	ldr	r0, [pc, #576]	; (8000ae8 <ESP_Init+0x274>)
 80008a6:	f7ff fc93 	bl	80001d0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	498d      	ldr	r1, [pc, #564]	; (8000ae8 <ESP_Init+0x274>)
 80008b2:	488e      	ldr	r0, [pc, #568]	; (8000aec <ESP_Init+0x278>)
 80008b4:	f002 fbd0 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80008b8:	2064      	movs	r0, #100	; 0x64
 80008ba:	f000 fdc1 	bl	8001440 <HAL_Delay>

	clear_Rxbuffer();
 80008be:	f000 fadd 	bl	8000e7c <clear_Rxbuffer>


/**************************CHECK it is run or not**************************************************/
	sprintf(Tx_Buffer, "AT\r\n");//wait until esp work properly
 80008c2:	498b      	ldr	r1, [pc, #556]	; (8000af0 <ESP_Init+0x27c>)
 80008c4:	4885      	ldr	r0, [pc, #532]	; (8000adc <ESP_Init+0x268>)
 80008c6:	f003 fb63 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
 80008ca:	4884      	ldr	r0, [pc, #528]	; (8000adc <ESP_Init+0x268>)
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	4981      	ldr	r1, [pc, #516]	; (8000adc <ESP_Init+0x268>)
 80008d8:	4881      	ldr	r0, [pc, #516]	; (8000ae0 <ESP_Init+0x26c>)
 80008da:	f002 fbbd 	bl	8003058 <HAL_UART_Transmit_IT>
	//HAL_Delay(500);
	while(!isSubString(Rx_Buffer, "OK"));
 80008de:	bf00      	nop
 80008e0:	4984      	ldr	r1, [pc, #528]	; (8000af4 <ESP_Init+0x280>)
 80008e2:	4885      	ldr	r0, [pc, #532]	; (8000af8 <ESP_Init+0x284>)
 80008e4:	f000 fb20 	bl	8000f28 <isSubString>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f083 0301 	eor.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f5      	bne.n	80008e0 <ESP_Init+0x6c>

	clear_Rxbuffer(); // clear garbage value of received from esp
 80008f4:	f000 fac2 	bl	8000e7c <clear_Rxbuffer>

	 /***************INFO***************************/
	sprintf(user_info,"AT---->OK\r\n");
 80008f8:	4980      	ldr	r1, [pc, #512]	; (8000afc <ESP_Init+0x288>)
 80008fa:	487b      	ldr	r0, [pc, #492]	; (8000ae8 <ESP_Init+0x274>)
 80008fc:	f003 fb48 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 8000900:	4879      	ldr	r0, [pc, #484]	; (8000ae8 <ESP_Init+0x274>)
 8000902:	f7ff fc65 	bl	80001d0 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	b29b      	uxth	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	4976      	ldr	r1, [pc, #472]	; (8000ae8 <ESP_Init+0x274>)
 800090e:	4877      	ldr	r0, [pc, #476]	; (8000aec <ESP_Init+0x278>)
 8000910:	f002 fba2 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000914:	2064      	movs	r0, #100	; 0x64
 8000916:	f000 fd93 	bl	8001440 <HAL_Delay>


/**************************Set ESP as client mode**************************************************/
	sprintf(Tx_Buffer, "AT+CWMODE=1\r\n");//wait until esp work properly
 800091a:	4979      	ldr	r1, [pc, #484]	; (8000b00 <ESP_Init+0x28c>)
 800091c:	486f      	ldr	r0, [pc, #444]	; (8000adc <ESP_Init+0x268>)
 800091e:	f003 fb37 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
 8000922:	486e      	ldr	r0, [pc, #440]	; (8000adc <ESP_Init+0x268>)
 8000924:	f7ff fc54 	bl	80001d0 <strlen>
 8000928:	4603      	mov	r3, r0
 800092a:	b29b      	uxth	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	496b      	ldr	r1, [pc, #428]	; (8000adc <ESP_Init+0x268>)
 8000930:	486b      	ldr	r0, [pc, #428]	; (8000ae0 <ESP_Init+0x26c>)
 8000932:	f002 fb91 	bl	8003058 <HAL_UART_Transmit_IT>
	while(!isSubString(Rx_Buffer, "OK"));
 8000936:	bf00      	nop
 8000938:	496e      	ldr	r1, [pc, #440]	; (8000af4 <ESP_Init+0x280>)
 800093a:	486f      	ldr	r0, [pc, #444]	; (8000af8 <ESP_Init+0x284>)
 800093c:	f000 faf4 	bl	8000f28 <isSubString>
 8000940:	4603      	mov	r3, r0
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1f5      	bne.n	8000938 <ESP_Init+0xc4>
	clear_Rxbuffer();
 800094c:	f000 fa96 	bl	8000e7c <clear_Rxbuffer>

	 /***************INFO***************************/
	sprintf(user_info,"CW MODE---->1\r\n");
 8000950:	496c      	ldr	r1, [pc, #432]	; (8000b04 <ESP_Init+0x290>)
 8000952:	4865      	ldr	r0, [pc, #404]	; (8000ae8 <ESP_Init+0x274>)
 8000954:	f003 fb1c 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 8000958:	4863      	ldr	r0, [pc, #396]	; (8000ae8 <ESP_Init+0x274>)
 800095a:	f7ff fc39 	bl	80001d0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29b      	uxth	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4960      	ldr	r1, [pc, #384]	; (8000ae8 <ESP_Init+0x274>)
 8000966:	4861      	ldr	r0, [pc, #388]	; (8000aec <ESP_Init+0x278>)
 8000968:	f002 fb76 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f000 fd67 	bl	8001440 <HAL_Delay>


/**************************Handle the WIFI connection**************************************************/
	sprintf(Tx_Buffer, "AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,psw);
 8000972:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <ESP_Init+0x294>)
 8000974:	4a65      	ldr	r2, [pc, #404]	; (8000b0c <ESP_Init+0x298>)
 8000976:	4966      	ldr	r1, [pc, #408]	; (8000b10 <ESP_Init+0x29c>)
 8000978:	4858      	ldr	r0, [pc, #352]	; (8000adc <ESP_Init+0x268>)
 800097a:	f003 fb09 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
 800097e:	4857      	ldr	r0, [pc, #348]	; (8000adc <ESP_Init+0x268>)
 8000980:	f7ff fc26 	bl	80001d0 <strlen>
 8000984:	4603      	mov	r3, r0
 8000986:	b29b      	uxth	r3, r3
 8000988:	461a      	mov	r2, r3
 800098a:	4954      	ldr	r1, [pc, #336]	; (8000adc <ESP_Init+0x268>)
 800098c:	4854      	ldr	r0, [pc, #336]	; (8000ae0 <ESP_Init+0x26c>)
 800098e:	f002 fb63 	bl	8003058 <HAL_UART_Transmit_IT>
	//HAL_Delay(5000); //wait 5 seconds for connection of ESP with WIFI
 	while(!isSubString(Rx_Buffer, "OK"));
 8000992:	bf00      	nop
 8000994:	4957      	ldr	r1, [pc, #348]	; (8000af4 <ESP_Init+0x280>)
 8000996:	4858      	ldr	r0, [pc, #352]	; (8000af8 <ESP_Init+0x284>)
 8000998:	f000 fac6 	bl	8000f28 <isSubString>
 800099c:	4603      	mov	r3, r0
 800099e:	f083 0301 	eor.w	r3, r3, #1
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f5      	bne.n	8000994 <ESP_Init+0x120>
	clear_Rxbuffer(); // clear garbage value of received from esp
 80009a8:	f000 fa68 	bl	8000e7c <clear_Rxbuffer>

	 /***************INFO***************************/
	sprintf(user_info, "AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,psw);
 80009ac:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <ESP_Init+0x294>)
 80009ae:	4a57      	ldr	r2, [pc, #348]	; (8000b0c <ESP_Init+0x298>)
 80009b0:	4957      	ldr	r1, [pc, #348]	; (8000b10 <ESP_Init+0x29c>)
 80009b2:	484d      	ldr	r0, [pc, #308]	; (8000ae8 <ESP_Init+0x274>)
 80009b4:	f003 faec 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 80009b8:	484b      	ldr	r0, [pc, #300]	; (8000ae8 <ESP_Init+0x274>)
 80009ba:	f7ff fc09 	bl	80001d0 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	4948      	ldr	r1, [pc, #288]	; (8000ae8 <ESP_Init+0x274>)
 80009c6:	4849      	ldr	r0, [pc, #292]	; (8000aec <ESP_Init+0x278>)
 80009c8:	f002 fb46 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f000 fd37 	bl	8001440 <HAL_Delay>
	sprintf(user_info,"Connected\r\n");
 80009d2:	4950      	ldr	r1, [pc, #320]	; (8000b14 <ESP_Init+0x2a0>)
 80009d4:	4844      	ldr	r0, [pc, #272]	; (8000ae8 <ESP_Init+0x274>)
 80009d6:	f003 fadb 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 80009da:	4843      	ldr	r0, [pc, #268]	; (8000ae8 <ESP_Init+0x274>)
 80009dc:	f7ff fbf8 	bl	80001d0 <strlen>
 80009e0:	4603      	mov	r3, r0
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	461a      	mov	r2, r3
 80009e6:	4940      	ldr	r1, [pc, #256]	; (8000ae8 <ESP_Init+0x274>)
 80009e8:	4840      	ldr	r0, [pc, #256]	; (8000aec <ESP_Init+0x278>)
 80009ea:	f002 fb35 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80009ee:	2064      	movs	r0, #100	; 0x64
 80009f0:	f000 fd26 	bl	8001440 <HAL_Delay>


/**************************Enable Multiple Connection**************************************************/
	sprintf(Tx_Buffer, "AT+CIPMUX=1\r\n");//wait until esp work properly
 80009f4:	4948      	ldr	r1, [pc, #288]	; (8000b18 <ESP_Init+0x2a4>)
 80009f6:	4839      	ldr	r0, [pc, #228]	; (8000adc <ESP_Init+0x268>)
 80009f8:	f003 faca 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
 80009fc:	4837      	ldr	r0, [pc, #220]	; (8000adc <ESP_Init+0x268>)
 80009fe:	f7ff fbe7 	bl	80001d0 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	4934      	ldr	r1, [pc, #208]	; (8000adc <ESP_Init+0x268>)
 8000a0a:	4835      	ldr	r0, [pc, #212]	; (8000ae0 <ESP_Init+0x26c>)
 8000a0c:	f002 fb24 	bl	8003058 <HAL_UART_Transmit_IT>
	//HAL_Delay(500);
	while(!isSubString(Rx_Buffer, "OK"));
 8000a10:	bf00      	nop
 8000a12:	4938      	ldr	r1, [pc, #224]	; (8000af4 <ESP_Init+0x280>)
 8000a14:	4838      	ldr	r0, [pc, #224]	; (8000af8 <ESP_Init+0x284>)
 8000a16:	f000 fa87 	bl	8000f28 <isSubString>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f083 0301 	eor.w	r3, r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f5      	bne.n	8000a12 <ESP_Init+0x19e>

	clear_Rxbuffer();
 8000a26:	f000 fa29 	bl	8000e7c <clear_Rxbuffer>

	 /***************INFO***************************/
	sprintf(user_info,"CIPMUX---->OK\r\n");
 8000a2a:	493c      	ldr	r1, [pc, #240]	; (8000b1c <ESP_Init+0x2a8>)
 8000a2c:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <ESP_Init+0x274>)
 8000a2e:	f003 faaf 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 8000a32:	482d      	ldr	r0, [pc, #180]	; (8000ae8 <ESP_Init+0x274>)
 8000a34:	f7ff fbcc 	bl	80001d0 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	492a      	ldr	r1, [pc, #168]	; (8000ae8 <ESP_Init+0x274>)
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <ESP_Init+0x278>)
 8000a42:	f002 fb09 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f000 fcfa 	bl	8001440 <HAL_Delay>




/**************************Enable Multiple Connection**************************************************/
	sprintf(Tx_Buffer, "AT+CIPSERVER=1,80\r\n");//wait until esp work properly
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <ESP_Init+0x2ac>)
 8000a4e:	4823      	ldr	r0, [pc, #140]	; (8000adc <ESP_Init+0x268>)
 8000a50:	f003 fa9e 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)Tx_Buffer, strlen(Tx_Buffer));
 8000a54:	4821      	ldr	r0, [pc, #132]	; (8000adc <ESP_Init+0x268>)
 8000a56:	f7ff fbbb 	bl	80001d0 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	491e      	ldr	r1, [pc, #120]	; (8000adc <ESP_Init+0x268>)
 8000a62:	481f      	ldr	r0, [pc, #124]	; (8000ae0 <ESP_Init+0x26c>)
 8000a64:	f002 faf8 	bl	8003058 <HAL_UART_Transmit_IT>
	//HAL_Delay(500);
	while(!isSubString(Rx_Buffer, "OK"));
 8000a68:	bf00      	nop
 8000a6a:	4922      	ldr	r1, [pc, #136]	; (8000af4 <ESP_Init+0x280>)
 8000a6c:	4822      	ldr	r0, [pc, #136]	; (8000af8 <ESP_Init+0x284>)
 8000a6e:	f000 fa5b 	bl	8000f28 <isSubString>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f083 0301 	eor.w	r3, r3, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1f5      	bne.n	8000a6a <ESP_Init+0x1f6>
	//state = true;
	clear_Rxbuffer();
 8000a7e:	f000 f9fd 	bl	8000e7c <clear_Rxbuffer>

	/***************INFO***************************/
	sprintf(user_info,"CIPSERVER---->OK\r\n");
 8000a82:	4928      	ldr	r1, [pc, #160]	; (8000b24 <ESP_Init+0x2b0>)
 8000a84:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <ESP_Init+0x274>)
 8000a86:	f003 fa83 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <ESP_Init+0x274>)
 8000a8c:	f7ff fba0 	bl	80001d0 <strlen>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	4914      	ldr	r1, [pc, #80]	; (8000ae8 <ESP_Init+0x274>)
 8000a98:	4814      	ldr	r0, [pc, #80]	; (8000aec <ESP_Init+0x278>)
 8000a9a:	f002 fadd 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(500);
 8000a9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa2:	f000 fccd 	bl	8001440 <HAL_Delay>
	sprintf(user_info,"All necessary initialization are complete....\r\n");
 8000aa6:	4920      	ldr	r1, [pc, #128]	; (8000b28 <ESP_Init+0x2b4>)
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <ESP_Init+0x274>)
 8000aaa:	f003 fa71 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_info, strlen(user_info));
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <ESP_Init+0x274>)
 8000ab0:	f7ff fb8e 	bl	80001d0 <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	490b      	ldr	r1, [pc, #44]	; (8000ae8 <ESP_Init+0x274>)
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <ESP_Init+0x278>)
 8000abe:	f002 facb 	bl	8003058 <HAL_UART_Transmit_IT>


	clear_Rxbuffer();
 8000ac2:	f000 f9db 	bl	8000e7c <clear_Rxbuffer>

	sprintf(dataSend, Basic_inclusion);
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <ESP_Init+0x2b8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	4818      	ldr	r0, [pc, #96]	; (8000b30 <ESP_Init+0x2bc>)
 8000ace:	f003 fa5f 	bl	8003f90 <siprintf>




}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08004af0 	.word	0x08004af0
 8000adc:	2000022c 	.word	0x2000022c
 8000ae0:	200001e4 	.word	0x200001e4
 8000ae4:	08004afc 	.word	0x08004afc
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	200001a0 	.word	0x200001a0
 8000af0:	08004b08 	.word	0x08004b08
 8000af4:	08004b10 	.word	0x08004b10
 8000af8:	20000328 	.word	0x20000328
 8000afc:	08004b14 	.word	0x08004b14
 8000b00:	08004b20 	.word	0x08004b20
 8000b04:	08004b30 	.word	0x08004b30
 8000b08:	08004b40 	.word	0x08004b40
 8000b0c:	08004b4c 	.word	0x08004b4c
 8000b10:	08004b50 	.word	0x08004b50
 8000b14:	08004b68 	.word	0x08004b68
 8000b18:	08004b74 	.word	0x08004b74
 8000b1c:	08004b84 	.word	0x08004b84
 8000b20:	08004b94 	.word	0x08004b94
 8000b24:	08004ba8 	.word	0x08004ba8
 8000b28:	08004bbc 	.word	0x08004bbc
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000394 	.word	0x20000394

08000b34 <ESP_Server_Start>:


void ESP_Server_Start(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
	//HAL_UART_Receive_IT(&huart1,(uint8_t*)TempRx, 1);
	int id = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]

	while(!isSubString(Rx_Buffer, "HTTP"));
 8000b3e:	bf00      	nop
 8000b40:	494b      	ldr	r1, [pc, #300]	; (8000c70 <ESP_Server_Start+0x13c>)
 8000b42:	484c      	ldr	r0, [pc, #304]	; (8000c74 <ESP_Server_Start+0x140>)
 8000b44:	f000 f9f0 	bl	8000f28 <isSubString>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f083 0301 	eor.w	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1f5      	bne.n	8000b40 <ESP_Server_Start+0xc>
	id = get_id();
 8000b54:	f000 fa3c 	bl	8000fd0 <get_id>
 8000b58:	6078      	str	r0, [r7, #4]
	//while()



	HAL_UART_Transmit_IT(&huart2,(uint8_t*)Rx_Buffer,BUFFER_SIZE);
 8000b5a:	2264      	movs	r2, #100	; 0x64
 8000b5c:	4945      	ldr	r1, [pc, #276]	; (8000c74 <ESP_Server_Start+0x140>)
 8000b5e:	4846      	ldr	r0, [pc, #280]	; (8000c78 <ESP_Server_Start+0x144>)
 8000b60:	f002 fa7a 	bl	8003058 <HAL_UART_Transmit_IT>


 	if(isSubString(Rx_Buffer, "pin=on"))
 8000b64:	4945      	ldr	r1, [pc, #276]	; (8000c7c <ESP_Server_Start+0x148>)
 8000b66:	4843      	ldr	r0, [pc, #268]	; (8000c74 <ESP_Server_Start+0x140>)
 8000b68:	f000 f9de 	bl	8000f28 <isSubString>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <ESP_Server_Start+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	4841      	ldr	r0, [pc, #260]	; (8000c80 <ESP_Server_Start+0x14c>)
 8000b7a:	f000 ffd1 	bl	8001b20 <HAL_GPIO_WritePin>
 8000b7e:	e06e      	b.n	8000c5e <ESP_Server_Start+0x12a>


	}
	else if(isSubString(Rx_Buffer, "pin=off"))
 8000b80:	4940      	ldr	r1, [pc, #256]	; (8000c84 <ESP_Server_Start+0x150>)
 8000b82:	483c      	ldr	r0, [pc, #240]	; (8000c74 <ESP_Server_Start+0x140>)
 8000b84:	f000 f9d0 	bl	8000f28 <isSubString>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <ESP_Server_Start+0x68>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	483a      	ldr	r0, [pc, #232]	; (8000c80 <ESP_Server_Start+0x14c>)
 8000b96:	f000 ffc3 	bl	8001b20 <HAL_GPIO_WritePin>
 8000b9a:	e060      	b.n	8000c5e <ESP_Server_Start+0x12a>



	}
	else if(isSubString(Rx_Buffer, "motor_a"))
 8000b9c:	493a      	ldr	r1, [pc, #232]	; (8000c88 <ESP_Server_Start+0x154>)
 8000b9e:	4835      	ldr	r0, [pc, #212]	; (8000c74 <ESP_Server_Start+0x140>)
 8000ba0:	f000 f9c2 	bl	8000f28 <isSubString>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d01f      	beq.n	8000bea <ESP_Server_Start+0xb6>
	{
		angle = get_number(Rx_Buffer);
 8000baa:	4832      	ldr	r0, [pc, #200]	; (8000c74 <ESP_Server_Start+0x140>)
 8000bac:	f000 fa40 	bl	8001030 <get_number>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <ESP_Server_Start+0x158>)
 8000bb6:	801a      	strh	r2, [r3, #0]
		angle = map(angle, 130, 470, 0, 180);
 8000bb8:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <ESP_Server_Start+0x158>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	23b4      	movs	r3, #180	; 0xb4
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000bc8:	2182      	movs	r1, #130	; 0x82
 8000bca:	f000 fa7a 	bl	80010c2 <map>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <ESP_Server_Start+0x158>)
 8000bd4:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,angle);
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <ESP_Server_Start+0x158>)
 8000bd8:	881a      	ldrh	r2, [r3, #0]
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <ESP_Server_Start+0x15c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(300);
 8000be0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000be4:	f000 fc2c 	bl	8001440 <HAL_Delay>
 8000be8:	e039      	b.n	8000c5e <ESP_Server_Start+0x12a>
	}
	else if(isSubString(Rx_Buffer, "motor_b"))
 8000bea:	492a      	ldr	r1, [pc, #168]	; (8000c94 <ESP_Server_Start+0x160>)
 8000bec:	4821      	ldr	r0, [pc, #132]	; (8000c74 <ESP_Server_Start+0x140>)
 8000bee:	f000 f99b 	bl	8000f28 <isSubString>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d01f      	beq.n	8000c38 <ESP_Server_Start+0x104>
	{
		angle = get_number(Rx_Buffer);
 8000bf8:	481e      	ldr	r0, [pc, #120]	; (8000c74 <ESP_Server_Start+0x140>)
 8000bfa:	f000 fa19 	bl	8001030 <get_number>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <ESP_Server_Start+0x158>)
 8000c04:	801a      	strh	r2, [r3, #0]
		angle = map(angle, 130, 470, 0, 180);
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <ESP_Server_Start+0x158>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	23b4      	movs	r3, #180	; 0xb4
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2300      	movs	r3, #0
 8000c12:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000c16:	2182      	movs	r1, #130	; 0x82
 8000c18:	f000 fa53 	bl	80010c2 <map>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <ESP_Server_Start+0x158>)
 8000c22:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,angle);
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <ESP_Server_Start+0x158>)
 8000c26:	881a      	ldrh	r2, [r3, #0]
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <ESP_Server_Start+0x15c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(300);
 8000c2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c32:	f000 fc05 	bl	8001440 <HAL_Delay>
 8000c36:	e012      	b.n	8000c5e <ESP_Server_Start+0x12a>
	}

	else if((isSubString(Rx_Buffer, "favicon.ico")) == 1)
 8000c38:	4917      	ldr	r1, [pc, #92]	; (8000c98 <ESP_Server_Start+0x164>)
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <ESP_Server_Start+0x140>)
 8000c3c:	f000 f974 	bl	8000f28 <isSubString>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d005      	beq.n	8000c52 <ESP_Server_Start+0x11e>
	{
		HAL_Delay(50);
 8000c46:	2032      	movs	r0, #50	; 0x32
 8000c48:	f000 fbfa 	bl	8001440 <HAL_Delay>
		clear_Rxbuffer();
 8000c4c:	f000 f916 	bl	8000e7c <clear_Rxbuffer>
 8000c50:	e005      	b.n	8000c5e <ESP_Server_Start+0x12a>

	}

	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <ESP_Server_Start+0x14c>)
 8000c5a:	f000 ff61 	bl	8001b20 <HAL_GPIO_WritePin>


	}


 	ESP_Server_Send(dataSend,id);
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	480e      	ldr	r0, [pc, #56]	; (8000c9c <ESP_Server_Start+0x168>)
 8000c62:	f000 f81d 	bl	8000ca0 <ESP_Server_Send>



}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	08004bec 	.word	0x08004bec
 8000c74:	20000328 	.word	0x20000328
 8000c78:	200001a0 	.word	0x200001a0
 8000c7c:	08004bf4 	.word	0x08004bf4
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	08004bfc 	.word	0x08004bfc
 8000c88:	08004c04 	.word	0x08004c04
 8000c8c:	20000796 	.word	0x20000796
 8000c90:	20000158 	.word	0x20000158
 8000c94:	08004c0c 	.word	0x08004c0c
 8000c98:	08004c14 	.word	0x08004c14
 8000c9c:	20000394 	.word	0x20000394

08000ca0 <ESP_Server_Send>:


int ESP_Server_Send(char *str, int id)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b09c      	sub	sp, #112	; 0x70
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	int len = strlen(str);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fa90 	bl	80001d0 <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
	char data[100] = {0};
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2260      	movs	r2, #96	; 0x60
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 f95d 	bl	8003f80 <memset>
	clear_Rxbuffer();
 8000cc6:	f000 f8d9 	bl	8000e7c <clear_Rxbuffer>

	HAL_UART_Transmit_IT(&huart2,(uint8_t*)Rx_Buffer,BUFFER_SIZE);
 8000cca:	2264      	movs	r2, #100	; 0x64
 8000ccc:	4962      	ldr	r1, [pc, #392]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000cce:	4863      	ldr	r0, [pc, #396]	; (8000e5c <ESP_Server_Send+0x1bc>)
 8000cd0:	f002 f9c2 	bl	8003058 <HAL_UART_Transmit_IT>
	sprintf(data, "AT+CIPSEND=%d,%d\r\n",id,len);
 8000cd4:	f107 0008 	add.w	r0, r7, #8
 8000cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4960      	ldr	r1, [pc, #384]	; (8000e60 <ESP_Server_Send+0x1c0>)
 8000cde:	f003 f957 	bl	8003f90 <siprintf>
	HAL_Delay(50);
 8000ce2:	2032      	movs	r0, #50	; 0x32
 8000ce4:	f000 fbac 	bl	8001440 <HAL_Delay>
	clear_Rxbuffer();
 8000ce8:	f000 f8c8 	bl	8000e7c <clear_Rxbuffer>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)data, strlen(data));
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fa6d 	bl	80001d0 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4858      	ldr	r0, [pc, #352]	; (8000e64 <ESP_Server_Send+0x1c4>)
 8000d02:	f002 f9a9 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(50);
 8000d06:	2032      	movs	r0, #50	; 0x32
 8000d08:	f000 fb9a 	bl	8001440 <HAL_Delay>
	while(!isSubString(Rx_Buffer,">"))
 8000d0c:	e016      	b.n	8000d3c <ESP_Server_Send+0x9c>
	{

		if(isSubString(Rx_Buffer,"ERROR"))
 8000d0e:	4956      	ldr	r1, [pc, #344]	; (8000e68 <ESP_Server_Send+0x1c8>)
 8000d10:	4851      	ldr	r0, [pc, #324]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000d12:	f000 f909 	bl	8000f28 <isSubString>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00f      	beq.n	8000d3c <ESP_Server_Send+0x9c>
		{
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)str, strlen(data));
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fa55 	bl	80001d0 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	484d      	ldr	r0, [pc, #308]	; (8000e64 <ESP_Server_Send+0x1c4>)
 8000d30:	f002 f992 	bl	8003058 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 8000d34:	2032      	movs	r0, #50	; 0x32
 8000d36:	f000 fb83 	bl	8001440 <HAL_Delay>
			break;
 8000d3a:	e009      	b.n	8000d50 <ESP_Server_Send+0xb0>
	while(!isSubString(Rx_Buffer,">"))
 8000d3c:	494b      	ldr	r1, [pc, #300]	; (8000e6c <ESP_Server_Send+0x1cc>)
 8000d3e:	4846      	ldr	r0, [pc, #280]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000d40:	f000 f8f2 	bl	8000f28 <isSubString>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f083 0301 	eor.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1de      	bne.n	8000d0e <ESP_Server_Send+0x6e>
		}
	}
	//while(!isSubString(Rx_Buffer,">"));
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)Rx_Buffer,BUFFER_SIZE);
 8000d50:	2264      	movs	r2, #100	; 0x64
 8000d52:	4941      	ldr	r1, [pc, #260]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000d54:	4841      	ldr	r0, [pc, #260]	; (8000e5c <ESP_Server_Send+0x1bc>)
 8000d56:	f002 f97f 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(50);
 8000d5a:	2032      	movs	r0, #50	; 0x32
 8000d5c:	f000 fb70 	bl	8001440 <HAL_Delay>
	clear_Rxbuffer();
 8000d60:	f000 f88c 	bl	8000e7c <clear_Rxbuffer>


	HAL_UART_Transmit_IT(&huart1,(uint8_t*)str, strlen(str));
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fa33 	bl	80001d0 <strlen>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	483c      	ldr	r0, [pc, #240]	; (8000e64 <ESP_Server_Send+0x1c4>)
 8000d74:	f002 f970 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(50);
 8000d78:	2032      	movs	r0, #50	; 0x32
 8000d7a:	f000 fb61 	bl	8001440 <HAL_Delay>
	while(!isSubString(Rx_Buffer,"SEND OK"))
 8000d7e:	e014      	b.n	8000daa <ESP_Server_Send+0x10a>
	{

		if(isSubString(Rx_Buffer,"ERROR"))
 8000d80:	4939      	ldr	r1, [pc, #228]	; (8000e68 <ESP_Server_Send+0x1c8>)
 8000d82:	4835      	ldr	r0, [pc, #212]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000d84:	f000 f8d0 	bl	8000f28 <isSubString>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00d      	beq.n	8000daa <ESP_Server_Send+0x10a>
		{
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)str, strlen(str));
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fa1e 	bl	80001d0 <strlen>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	4831      	ldr	r0, [pc, #196]	; (8000e64 <ESP_Server_Send+0x1c4>)
 8000d9e:	f002 f95b 	bl	8003058 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 8000da2:	2032      	movs	r0, #50	; 0x32
 8000da4:	f000 fb4c 	bl	8001440 <HAL_Delay>
			break;
 8000da8:	e009      	b.n	8000dbe <ESP_Server_Send+0x11e>
	while(!isSubString(Rx_Buffer,"SEND OK"))
 8000daa:	4931      	ldr	r1, [pc, #196]	; (8000e70 <ESP_Server_Send+0x1d0>)
 8000dac:	482a      	ldr	r0, [pc, #168]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000dae:	f000 f8bb 	bl	8000f28 <isSubString>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f083 0301 	eor.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1e0      	bne.n	8000d80 <ESP_Server_Send+0xe0>
		}
	}
	//HAL_UART_Transmit_IT(&huart1,(uint8_t*)str, strlen(str));
	//while(!isSubString(Rx_Buffer,"SEND OK"));
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)Rx_Buffer,BUFFER_SIZE);
 8000dbe:	2264      	movs	r2, #100	; 0x64
 8000dc0:	4925      	ldr	r1, [pc, #148]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000dc2:	4826      	ldr	r0, [pc, #152]	; (8000e5c <ESP_Server_Send+0x1bc>)
 8000dc4:	f002 f948 	bl	8003058 <HAL_UART_Transmit_IT>
	HAL_Delay(50);
 8000dc8:	2032      	movs	r0, #50	; 0x32
 8000dca:	f000 fb39 	bl	8001440 <HAL_Delay>




	clear_Rxbuffer();
 8000dce:	f000 f855 	bl	8000e7c <clear_Rxbuffer>
	sprintf(data, "AT+CIPCLOSE=%d\r\n",id);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4926      	ldr	r1, [pc, #152]	; (8000e74 <ESP_Server_Send+0x1d4>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 f8d8 	bl	8003f90 <siprintf>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)data, strlen(data));
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff f9f3 	bl	80001d0 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	481b      	ldr	r0, [pc, #108]	; (8000e64 <ESP_Server_Send+0x1c4>)
 8000df6:	f002 f92f 	bl	8003058 <HAL_UART_Transmit_IT>
	while(!isSubString(Rx_Buffer,"OK"))
 8000dfa:	e016      	b.n	8000e2a <ESP_Server_Send+0x18a>
	{

		if(isSubString(Rx_Buffer,"ERROR"))
 8000dfc:	491a      	ldr	r1, [pc, #104]	; (8000e68 <ESP_Server_Send+0x1c8>)
 8000dfe:	4816      	ldr	r0, [pc, #88]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000e00:	f000 f892 	bl	8000f28 <isSubString>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00f      	beq.n	8000e2a <ESP_Server_Send+0x18a>
		{
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)str, strlen(data));
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff f9de 	bl	80001d0 <strlen>
 8000e14:	4603      	mov	r3, r0
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	4811      	ldr	r0, [pc, #68]	; (8000e64 <ESP_Server_Send+0x1c4>)
 8000e1e:	f002 f91b 	bl	8003058 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 8000e22:	2032      	movs	r0, #50	; 0x32
 8000e24:	f000 fb0c 	bl	8001440 <HAL_Delay>
			break;
 8000e28:	e009      	b.n	8000e3e <ESP_Server_Send+0x19e>
	while(!isSubString(Rx_Buffer,"OK"))
 8000e2a:	4913      	ldr	r1, [pc, #76]	; (8000e78 <ESP_Server_Send+0x1d8>)
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000e2e:	f000 f87b 	bl	8000f28 <isSubString>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1de      	bne.n	8000dfc <ESP_Server_Send+0x15c>
		}
	}
	//while(!isSubString(Rx_Buffer,"OK"));
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)Rx_Buffer,BUFFER_SIZE);
 8000e3e:	2264      	movs	r2, #100	; 0x64
 8000e40:	4905      	ldr	r1, [pc, #20]	; (8000e58 <ESP_Server_Send+0x1b8>)
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <ESP_Server_Send+0x1bc>)
 8000e44:	f002 f908 	bl	8003058 <HAL_UART_Transmit_IT>
	clear_Rxbuffer();
 8000e48:	f000 f818 	bl	8000e7c <clear_Rxbuffer>
	return 1;
 8000e4c:	2301      	movs	r3, #1

}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3770      	adds	r7, #112	; 0x70
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000328 	.word	0x20000328
 8000e5c:	200001a0 	.word	0x200001a0
 8000e60:	08004c20 	.word	0x08004c20
 8000e64:	200001e4 	.word	0x200001e4
 8000e68:	08004c34 	.word	0x08004c34
 8000e6c:	08004c3c 	.word	0x08004c3c
 8000e70:	08004c40 	.word	0x08004c40
 8000e74:	08004c48 	.word	0x08004c48
 8000e78:	08004b10 	.word	0x08004b10

08000e7c <clear_Rxbuffer>:


void clear_Rxbuffer(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
	++counter2;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <clear_Rxbuffer+0x44>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <clear_Rxbuffer+0x44>)
 8000e8a:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<Rx_index;i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	e007      	b.n	8000ea2 <clear_Rxbuffer+0x26>
	{
		Rx_Buffer[i] = '\0';
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <clear_Rxbuffer+0x48>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<Rx_index;i++)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <clear_Rxbuffer+0x4c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf2      	blt.n	8000e92 <clear_Rxbuffer+0x16>
	}
	Rx_index = 0;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <clear_Rxbuffer+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]

}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000228 	.word	0x20000228
 8000ec4:	20000328 	.word	0x20000328
 8000ec8:	2000038c 	.word	0x2000038c

08000ecc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_UART_RxCpltCallback+0x4c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d119      	bne.n	8000f10 <HAL_UART_RxCpltCallback+0x44>
	{
		if((TempRx[0] != '\0') && (Rx_index < BUFFER_SIZE))
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_UART_RxCpltCallback+0x50>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d010      	beq.n	8000f06 <HAL_UART_RxCpltCallback+0x3a>
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_UART_RxCpltCallback+0x54>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b63      	cmp	r3, #99	; 0x63
 8000eea:	dc0c      	bgt.n	8000f06 <HAL_UART_RxCpltCallback+0x3a>
		{
			*(Rx_Buffer + (++Rx_index)) = TempRx[0];
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_UART_RxCpltCallback+0x54>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_UART_RxCpltCallback+0x54>)
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_UART_RxCpltCallback+0x54>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_UART_RxCpltCallback+0x58>)
 8000efe:	4413      	add	r3, r2
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_UART_RxCpltCallback+0x50>)
 8000f02:	7812      	ldrb	r2, [r2, #0]
 8000f04:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart,(uint8_t*)TempRx, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	4904      	ldr	r1, [pc, #16]	; (8000f1c <HAL_UART_RxCpltCallback+0x50>)
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f002 f8e9 	bl	80030e2 <HAL_UART_Receive_IT>

	}
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200001e4 	.word	0x200001e4
 8000f1c:	20000390 	.word	0x20000390
 8000f20:	2000038c 	.word	0x2000038c
 8000f24:	20000328 	.word	0x20000328

08000f28 <isSubString>:




bool isSubString(char *str11, char *str22)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  //int len1 = sizeof(str11);
  int len2 = strlen(str22);
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f7ff f94c 	bl	80001d0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	613b      	str	r3, [r7, #16]

  if(Rx_index <= len2)
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <isSubString+0xa4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	db02      	blt.n	8000f4c <isSubString+0x24>
  {
	  Rx_index = len2;
 8000f46:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <isSubString+0xa4>)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	6013      	str	r3, [r2, #0]
  }

  int end = Rx_index - len2 + 1;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <isSubString+0xa4>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	3301      	adds	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
  if((Rx_index < len2) || (Rx_index <=0 ))
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <isSubString+0xa4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dc03      	bgt.n	8000f6a <isSubString+0x42>
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <isSubString+0xa4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dc01      	bgt.n	8000f6e <isSubString+0x46>
  {
	  return false;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e02a      	b.n	8000fc4 <isSubString+0x9c>
  }
  for (int i = 0; i < end; i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e022      	b.n	8000fba <isSubString+0x92>
  {

    bool check_found = true;
 8000f74:	2301      	movs	r3, #1
 8000f76:	76fb      	strb	r3, [r7, #27]


    for (int j = 0; j < len2; j++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e011      	b.n	8000fa2 <isSubString+0x7a>
    {

      if (*(str22+j) != *(str11+i + j))
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	69f9      	ldr	r1, [r7, #28]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	440b      	add	r3, r1
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	440b      	add	r3, r1
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d002      	beq.n	8000f9c <isSubString+0x74>
      {
        check_found = false;
 8000f96:	2300      	movs	r3, #0
 8000f98:	76fb      	strb	r3, [r7, #27]

        break;
 8000f9a:	e006      	b.n	8000faa <isSubString+0x82>
    for (int j = 0; j < len2; j++)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	dbe9      	blt.n	8000f7e <isSubString+0x56>
      }
    }

    if (check_found)
 8000faa:	7efb      	ldrb	r3, [r7, #27]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <isSubString+0x8c>
    {
    	return true;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e007      	b.n	8000fc4 <isSubString+0x9c>
  for (int i = 0; i < end; i++)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbd8      	blt.n	8000f74 <isSubString+0x4c>
    }
  }

  return false;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000038c 	.word	0x2000038c

08000fd0 <get_id>:

int  get_id(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	int i = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
	uint16_t id = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	807b      	strh	r3, [r7, #2]
	while(1)
	{
		if(((Rx_Buffer[i]) == 'I') && ((Rx_Buffer[i+1]) == 'P') && ((Rx_Buffer[i+2]) == 'D'))
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <get_id+0x5c>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b49      	cmp	r3, #73	; 0x49
 8000fe8:	d114      	bne.n	8001014 <get_id+0x44>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3301      	adds	r3, #1
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <get_id+0x5c>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	2b50      	cmp	r3, #80	; 0x50
 8000ff4:	d10e      	bne.n	8001014 <get_id+0x44>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <get_id+0x5c>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	2b44      	cmp	r3, #68	; 0x44
 8001000:	d108      	bne.n	8001014 <get_id+0x44>
		{
			 id = (uint16_t)(Rx_Buffer[i+4]);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3304      	adds	r3, #4
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <get_id+0x5c>)
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	807b      	strh	r3, [r7, #2]
			 id = id-48;
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	3b30      	subs	r3, #48	; 0x30
 8001010:	807b      	strh	r3, [r7, #2]
			 break;
 8001012:	e003      	b.n	800101c <get_id+0x4c>
		}
		++i;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3301      	adds	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
		if(((Rx_Buffer[i]) == 'I') && ((Rx_Buffer[i+1]) == 'P') && ((Rx_Buffer[i+2]) == 'D'))
 800101a:	e7e0      	b.n	8000fde <get_id+0xe>
	}
	return id;
 800101c:	887b      	ldrh	r3, [r7, #2]
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000328 	.word	0x20000328

08001030 <get_number>:



int get_number(char *str)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    int num = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
    int total = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
    int counter;

    for (int i = 0; i < 64; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e033      	b.n	80010ae <get_number+0x7e>
    {
        if((*(str + i) == '_') && (*(str + i + 2)=='='))
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b5f      	cmp	r3, #95	; 0x5f
 8001050:	d12a      	bne.n	80010a8 <get_number+0x78>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3302      	adds	r3, #2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b3d      	cmp	r3, #61	; 0x3d
 800105e:	d123      	bne.n	80010a8 <get_number+0x78>
        {
            counter = i + 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3303      	adds	r3, #3
 8001064:	613b      	str	r3, [r7, #16]
            while (*(str + counter) >= '0'  &&  (*(str + counter) <= '9'))
 8001066:	e013      	b.n	8001090 <get_number+0x60>
            {
                num =(int) (*(str + counter));
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	60bb      	str	r3, [r7, #8]
                num -=48;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3b30      	subs	r3, #48	; 0x30
 8001076:	60bb      	str	r3, [r7, #8]
                total = total*10 + num;
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	461a      	mov	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	617b      	str	r3, [r7, #20]
                ++counter;
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	3301      	adds	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
            while (*(str + counter) >= '0'  &&  (*(str + counter) <= '9'))
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b2f      	cmp	r3, #47	; 0x2f
 800109a:	d905      	bls.n	80010a8 <get_number+0x78>
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b39      	cmp	r3, #57	; 0x39
 80010a6:	d9df      	bls.n	8001068 <get_number+0x38>
    for (int i = 0; i < 64; i++)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3301      	adds	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b3f      	cmp	r3, #63	; 0x3f
 80010b2:	ddc8      	ble.n	8001046 <get_number+0x16>
            }

        }
    }

    return total;
 80010b4:	697b      	ldr	r3, [r7, #20]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	371c      	adds	r7, #28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <map>:

int map(int variable, int reference_min,int reference_max,int angle_min,int angle_max)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b087      	sub	sp, #28
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	603b      	str	r3, [r7, #0]
	float x;
	x = reference_min + ((float)(reference_max-reference_min)/(angle_max - angle_min)) * variable;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80010e8:	6a3a      	ldr	r2, [r7, #32]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110c:	edc7 7a05 	vstr	s15, [r7, #20]

	return (int)x;
 8001110:	edd7 7a05 	vldr	s15, [r7, #20]
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	ee17 3a90 	vmov	r3, s15
}
 800111c:	4618      	mov	r0, r3
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <Error_handler>:



void Error_handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_MspInit>:
 */
#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef htim2;
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	//do low level processor specific inits
	//1. set up priority grouping of arm
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 fa73 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable reqired system exception
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_MspInit+0x40>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_MspInit+0x40>)
 8001148:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800114c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for system exceptions

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	f06f 000b 	mvn.w	r0, #11
 8001156:	f000 fa72 	bl	800163e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	f06f 000a 	mvn.w	r0, #10
 8001162:	f000 fa6c 	bl	800163e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	f06f 0009 	mvn.w	r0, #9
 800116e:	f000 fa66 	bl	800163e <HAL_NVIC_SetPriority>


}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2OC_ch_gpios;

	//1. enable peripheral clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_TIM_PWM_MspInit+0x74>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_TIM_PWM_MspInit+0x74>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_TIM_PWM_MspInit+0x74>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM2_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_TIM_PWM_MspInit+0x74>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_TIM_PWM_MspInit+0x74>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6413      	str	r3, [r2, #64]	; 0x40
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_TIM_PWM_MspInit+0x74>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]

	//2. configure gpıos to behave as timer to channel 1,2,3 and 4
	//                              CH1        CH2           CH3         CH4
	tim2OC_ch_gpios.Pin       = GPIO_PIN_0 | GPIO_PIN_1 ;// GPIO_PIN_2 | GPIO_PIN_3;
 80011bc:	2303      	movs	r3, #3
 80011be:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
	tim2OC_ch_gpios.Pull      = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA,&tim2OC_ch_gpios);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <HAL_TIM_PWM_MspInit+0x78>)
 80011d4:	f000 fb08 	bl	80017e8 <HAL_GPIO_Init>



	//3. NVIV settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15,0);
 80011d8:	2200      	movs	r2, #0
 80011da:	210f      	movs	r1, #15
 80011dc:	201c      	movs	r0, #28
 80011de:	f000 fa2e 	bl	800163e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e2:	201c      	movs	r0, #28
 80011e4:	f000 fa47 	bl	8001676 <HAL_NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000

080011f8 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b090      	sub	sp, #64	; 0x40
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	//Enable clock paths
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a2c      	ldr	r2, [pc, #176]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART2_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 8001242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART1_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6453      	str	r3, [r2, #68]	; 0x44
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_UART_MspInit+0xe0>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]

	//configure pins for usart2 pins   PA2->TX, PA3->RX
	GPIO_InitTypeDef  gpio_usart2;


	gpio_usart2.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001270:	230c      	movs	r3, #12
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_usart2.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_usart2.Alternate = GPIO_AF7_USART2;
 8001278:	2307      	movs	r3, #7
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
	gpio_usart2.Pull      = GPIO_PULLUP;
 800127c:	2301      	movs	r3, #1
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
	gpio_usart2.Speed     = GPIO_SPEED_MEDIUM;
 8001280:	2301      	movs	r3, #1
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_GPIO_Init(GPIOA,&gpio_usart2);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <HAL_UART_MspInit+0xe4>)
 800128c:	f000 faac 	bl	80017e8 <HAL_GPIO_Init>

	//configure pins for usart1 pins   PA9->TX, PA10->RX
	GPIO_InitTypeDef  gpio_usart1;

	gpio_usart1.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001290:	23c0      	movs	r3, #192	; 0xc0
 8001292:	61bb      	str	r3, [r7, #24]
	gpio_usart1.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61fb      	str	r3, [r7, #28]
	gpio_usart1.Alternate = GPIO_AF7_USART1;
 8001298:	2307      	movs	r3, #7
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_usart1.Pull      = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	623b      	str	r3, [r7, #32]
	gpio_usart1.Speed     = GPIO_SPEED_MEDIUM;
 80012a0:	2301      	movs	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOB,&gpio_usart1);
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <HAL_UART_MspInit+0xe8>)
 80012ac:	f000 fa9c 	bl	80017e8 <HAL_GPIO_Init>

	//configure the nvic
	HAL_NVIC_SetPriority(USART2_IRQn, 15,1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	210f      	movs	r1, #15
 80012b4:	2026      	movs	r0, #38	; 0x26
 80012b6:	f000 f9c2 	bl	800163e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ba:	2026      	movs	r0, #38	; 0x26
 80012bc:	f000 f9db 	bl	8001676 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(USART1_IRQn, 15,0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	210f      	movs	r1, #15
 80012c4:	2025      	movs	r0, #37	; 0x25
 80012c6:	f000 f9ba 	bl	800163e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012ca:	2025      	movs	r0, #37	; 0x25
 80012cc:	f000 f9d3 	bl	8001676 <HAL_NVIC_EnableIRQ>

}
 80012d0:	bf00      	nop
 80012d2:	3740      	adds	r7, #64	; 0x40
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	; (8001354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001332:	f7ff ffd7 	bl	80012e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f002 fdff 	bl	8003f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff f949 	bl	80005d0 <main>
  bx  lr    
 800133e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 800134c:	08004cb8 	.word	0x08004cb8
  ldr r2, =_sbss
 8001350:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001354:	200007b0 	.word	0x200007b0

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_Init+0x40>)
 8001366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_Init+0x40>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_Init+0x40>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f94f 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f808 	bl	80013a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001390:	f7ff fed2 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x54>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f967 	bl	8001692 <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f92f 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_InitTick+0x5c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200000cc 	.word	0x200000cc
 80013f8:	200000d4 	.word	0x200000d4
 80013fc:	200000d0 	.word	0x200000d0

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200000d4 	.word	0x200000d4
 8001424:	20000798 	.word	0x20000798

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000798 	.word	0x20000798

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000d4 	.word	0x200000d4

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff29 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff3e 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff8e 	bl	800157c <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5d 	bl	8001528 <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff31 	bl	80014ec <__NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffa2 	bl	80015e4 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80016ae:	f000 f802 	bl	80016b6 <HAL_SYSTICK_Callback>
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016d2:	f7ff fea9 	bl	8001428 <HAL_GetTick>
 80016d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d008      	beq.n	80016f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e052      	b.n	800179c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0216 	bic.w	r2, r2, #22
 8001704:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001714:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <HAL_DMA_Abort+0x62>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0208 	bic.w	r2, r2, #8
 8001734:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001746:	e013      	b.n	8001770 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001748:	f7ff fe6e 	bl	8001428 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b05      	cmp	r3, #5
 8001754:	d90c      	bls.n	8001770 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2220      	movs	r2, #32
 800175a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2203      	movs	r2, #3
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e015      	b.n	800179c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1e4      	bne.n	8001748 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	223f      	movs	r2, #63	; 0x3f
 8001784:	409a      	lsls	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d004      	beq.n	80017c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00c      	b.n	80017dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2205      	movs	r2, #5
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	e16b      	b.n	8001adc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 815a 	bne.w	8001ad6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d005      	beq.n	800183a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	2b02      	cmp	r3, #2
 8001838:	d130      	bne.n	800189c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 0201 	and.w	r2, r3, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d017      	beq.n	80018d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d123      	bne.n	800192c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	69b9      	ldr	r1, [r7, #24]
 8001928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0203 	and.w	r2, r3, #3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80b4 	beq.w	8001ad6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b60      	ldr	r3, [pc, #384]	; (8001af4 <HAL_GPIO_Init+0x30c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a5f      	ldr	r2, [pc, #380]	; (8001af4 <HAL_GPIO_Init+0x30c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_GPIO_Init+0x30c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198a:	4a5b      	ldr	r2, [pc, #364]	; (8001af8 <HAL_GPIO_Init+0x310>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_GPIO_Init+0x314>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d02b      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_GPIO_Init+0x318>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d025      	beq.n	8001a0a <HAL_GPIO_Init+0x222>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <HAL_GPIO_Init+0x31c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01f      	beq.n	8001a06 <HAL_GPIO_Init+0x21e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <HAL_GPIO_Init+0x320>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x21a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <HAL_GPIO_Init+0x324>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x216>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4d      	ldr	r2, [pc, #308]	; (8001b10 <HAL_GPIO_Init+0x328>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x212>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <HAL_GPIO_Init+0x32c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x20e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4b      	ldr	r2, [pc, #300]	; (8001b18 <HAL_GPIO_Init+0x330>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x20a>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e00e      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019f2:	2308      	movs	r3, #8
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	; (8001af8 <HAL_GPIO_Init+0x310>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <HAL_GPIO_Init+0x334>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae90 	bls.w	8001804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40021c00 	.word	0x40021c00
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b3c:	e003      	b.n	8001b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e267      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d075      	beq.n	8001c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d00c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	4b85      	ldr	r3, [pc, #532]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d112      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8a:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b96:	d10b      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	4b7e      	ldr	r3, [pc, #504]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d05b      	beq.n	8001c5c <HAL_RCC_OscConfig+0x108>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d157      	bne.n	8001c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e242      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x74>
 8001bba:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a75      	ldr	r2, [pc, #468]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0xb0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x98>
 8001bd2:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6f      	ldr	r2, [pc, #444]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b6d      	ldr	r3, [pc, #436]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6c      	ldr	r2, [pc, #432]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xb0>
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a68      	ldr	r2, [pc, #416]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a65      	ldr	r2, [pc, #404]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fc0c 	bl	8001428 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fc08 	bl	8001428 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e207      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xc0>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fbf8 	bl	8001428 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fbf4 	bl	8001428 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1f3      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b51      	ldr	r3, [pc, #324]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0xe8>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d063      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6a:	4b4a      	ldr	r3, [pc, #296]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c76:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d11c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c82:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x152>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e1c7      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4937      	ldr	r1, [pc, #220]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	e03a      	b.n	8001d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_RCC_OscConfig+0x244>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff fbad 	bl	8001428 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fba9 	bl	8001428 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e1a8      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4925      	ldr	r1, [pc, #148]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_RCC_OscConfig+0x244>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fb8c 	bl	8001428 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff fb88 	bl	8001428 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e187      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d036      	beq.n	8001dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_RCC_OscConfig+0x248>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fb6c 	bl	8001428 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff fb68 	bl	8001428 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e167      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_OscConfig+0x240>)
 8001d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x200>
 8001d72:	e01b      	b.n	8001dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_OscConfig+0x248>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fb55 	bl	8001428 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	e00e      	b.n	8001da0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d82:	f7ff fb51 	bl	8001428 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d907      	bls.n	8001da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e150      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
 8001d94:	40023800 	.word	0x40023800
 8001d98:	42470000 	.word	0x42470000
 8001d9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ea      	bne.n	8001d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8097 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dbe:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10f      	bne.n	8001dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b7d      	ldr	r3, [pc, #500]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a7c      	ldr	r2, [pc, #496]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b7a      	ldr	r3, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de6:	2301      	movs	r3, #1
 8001de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <HAL_RCC_OscConfig+0x474>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d118      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df6:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <HAL_RCC_OscConfig+0x474>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a73      	ldr	r2, [pc, #460]	; (8001fc8 <HAL_RCC_OscConfig+0x474>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fb11 	bl	8001428 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0a:	f7ff fb0d 	bl	8001428 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e10c      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_OscConfig+0x474>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2ea>
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	4a63      	ldr	r2, [pc, #396]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3c:	e01c      	b.n	8001e78 <HAL_RCC_OscConfig+0x324>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x30c>
 8001e46:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	4a5e      	ldr	r2, [pc, #376]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6713      	str	r3, [r2, #112]	; 0x70
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a5b      	ldr	r2, [pc, #364]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0x324>
 8001e60:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a57      	ldr	r2, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	4b55      	ldr	r3, [pc, #340]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001e72:	f023 0304 	bic.w	r3, r3, #4
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d015      	beq.n	8001eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7ff fad2 	bl	8001428 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7ff face 	bl	8001428 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0cb      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0ee      	beq.n	8001e88 <HAL_RCC_OscConfig+0x334>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7ff fabc 	bl	8001428 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fab8 	bl	8001428 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0b5      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ee      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	4a38      	ldr	r2, [pc, #224]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a1 	beq.w	8002034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef2:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d05c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d141      	bne.n	8001f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_OscConfig+0x478>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fa8c 	bl	8001428 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff fa88 	bl	8001428 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e087      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	019b      	lsls	r3, r3, #6
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	491b      	ldr	r1, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x478>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fa61 	bl	8001428 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff fa5d 	bl	8001428 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e05c      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x416>
 8001f88:	e054      	b.n	8002034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0x478>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fa4a 	bl	8001428 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff fa46 	bl	8001428 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e045      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCC_OscConfig+0x470>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x444>
 8001fb6:	e03d      	b.n	8002034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e038      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x4ec>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d028      	beq.n	8002030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d121      	bne.n	8002030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d11a      	bne.n	8002030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002000:	4013      	ands	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002008:	4293      	cmp	r3, r2
 800200a:	d111      	bne.n	8002030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	3b01      	subs	r3, #1
 800201a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d107      	bne.n	8002030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0cc      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d90c      	bls.n	8002080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b65      	ldr	r3, [pc, #404]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b8      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	494d      	ldr	r1, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d044      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d119      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e067      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4934      	ldr	r1, [pc, #208]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7ff f978 	bl	8001428 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7ff f974 	bl	8001428 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e04f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d20c      	bcs.n	800218c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e032      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	490e      	ldr	r1, [pc, #56]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ca:	f000 f821 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	490a      	ldr	r1, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	5ccb      	ldrb	r3, [r1, r3]
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f8d8 	bl	80013a0 <HAL_InitTick>

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023c00 	.word	0x40023c00
 8002200:	40023800 	.word	0x40023800
 8002204:	08004c5c 	.word	0x08004c5c
 8002208:	200000cc 	.word	0x200000cc
 800220c:	200000d0 	.word	0x200000d0

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002214:	b094      	sub	sp, #80	; 0x50
 8002216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
 800221c:	2300      	movs	r3, #0
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002220:	2300      	movs	r3, #0
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002228:	4b79      	ldr	r3, [pc, #484]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d00d      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x40>
 8002234:	2b08      	cmp	r3, #8
 8002236:	f200 80e1 	bhi.w	80023fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x34>
 800223e:	2b04      	cmp	r3, #4
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x3a>
 8002242:	e0db      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_GetSysClockFreq+0x204>)
 8002246:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002248:	e0db      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224a:	4b73      	ldr	r3, [pc, #460]	; (8002418 <HAL_RCC_GetSysClockFreq+0x208>)
 800224c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800224e:	e0d8      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225a:	4b6d      	ldr	r3, [pc, #436]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002266:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	099b      	lsrs	r3, r3, #6
 800226c:	2200      	movs	r2, #0
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
 800227a:	2300      	movs	r3, #0
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
 800227e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002282:	4622      	mov	r2, r4
 8002284:	462b      	mov	r3, r5
 8002286:	f04f 0000 	mov.w	r0, #0
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	0159      	lsls	r1, r3, #5
 8002290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002294:	0150      	lsls	r0, r2, #5
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4621      	mov	r1, r4
 800229c:	1a51      	subs	r1, r2, r1
 800229e:	6139      	str	r1, [r7, #16]
 80022a0:	4629      	mov	r1, r5
 80022a2:	eb63 0301 	sbc.w	r3, r3, r1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b4:	4659      	mov	r1, fp
 80022b6:	018b      	lsls	r3, r1, #6
 80022b8:	4651      	mov	r1, sl
 80022ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022be:	4651      	mov	r1, sl
 80022c0:	018a      	lsls	r2, r1, #6
 80022c2:	4651      	mov	r1, sl
 80022c4:	ebb2 0801 	subs.w	r8, r2, r1
 80022c8:	4659      	mov	r1, fp
 80022ca:	eb63 0901 	sbc.w	r9, r3, r1
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e2:	4690      	mov	r8, r2
 80022e4:	4699      	mov	r9, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	eb18 0303 	adds.w	r3, r8, r3
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	462b      	mov	r3, r5
 80022f0:	eb49 0303 	adc.w	r3, r9, r3
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002302:	4629      	mov	r1, r5
 8002304:	024b      	lsls	r3, r1, #9
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800230c:	4621      	mov	r1, r4
 800230e:	024a      	lsls	r2, r1, #9
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	2200      	movs	r2, #0
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
 800231a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800231c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002320:	f7fd ffae 	bl	8000280 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800232c:	e058      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232e:	4b38      	ldr	r3, [pc, #224]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	099b      	lsrs	r3, r3, #6
 8002334:	2200      	movs	r2, #0
 8002336:	4618      	mov	r0, r3
 8002338:	4611      	mov	r1, r2
 800233a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002348:	4642      	mov	r2, r8
 800234a:	464b      	mov	r3, r9
 800234c:	f04f 0000 	mov.w	r0, #0
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	0159      	lsls	r1, r3, #5
 8002356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235a:	0150      	lsls	r0, r2, #5
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4641      	mov	r1, r8
 8002362:	ebb2 0a01 	subs.w	sl, r2, r1
 8002366:	4649      	mov	r1, r9
 8002368:	eb63 0b01 	sbc.w	fp, r3, r1
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800237c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002380:	ebb2 040a 	subs.w	r4, r2, sl
 8002384:	eb63 050b 	sbc.w	r5, r3, fp
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	00eb      	lsls	r3, r5, #3
 8002392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002396:	00e2      	lsls	r2, r4, #3
 8002398:	4614      	mov	r4, r2
 800239a:	461d      	mov	r5, r3
 800239c:	4643      	mov	r3, r8
 800239e:	18e3      	adds	r3, r4, r3
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	464b      	mov	r3, r9
 80023a4:	eb45 0303 	adc.w	r3, r5, r3
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023b6:	4629      	mov	r1, r5
 80023b8:	028b      	lsls	r3, r1, #10
 80023ba:	4621      	mov	r1, r4
 80023bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c0:	4621      	mov	r1, r4
 80023c2:	028a      	lsls	r2, r1, #10
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	2200      	movs	r2, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	61fa      	str	r2, [r7, #28]
 80023d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d4:	f7fd ff54 	bl	8000280 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4613      	mov	r3, r2
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023fa:	e002      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetSysClockFreq+0x204>)
 80023fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002404:	4618      	mov	r0, r3
 8002406:	3750      	adds	r7, #80	; 0x50
 8002408:	46bd      	mov	sp, r7
 800240a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	00f42400 	.word	0x00f42400
 8002418:	007a1200 	.word	0x007a1200

0800241c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	200000cc 	.word	0x200000cc

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	08004c6c 	.word	0x08004c6c

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffdc 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0b5b      	lsrs	r3, r3, #13
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	08004c6c 	.word	0x08004c6c

08002484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e041      	b.n	800251a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fe66 	bl	800117c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f000 faf2 	bl	8002aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_TIM_PWM_Start+0x24>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e022      	b.n	800258e <HAL_TIM_PWM_Start+0x6a>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b04      	cmp	r3, #4
 800254c:	d109      	bne.n	8002562 <HAL_TIM_PWM_Start+0x3e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e015      	b.n	800258e <HAL_TIM_PWM_Start+0x6a>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d109      	bne.n	800257c <HAL_TIM_PWM_Start+0x58>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e008      	b.n	800258e <HAL_TIM_PWM_Start+0x6a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e07c      	b.n	8002690 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d104      	bne.n	80025a6 <HAL_TIM_PWM_Start+0x82>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a4:	e013      	b.n	80025ce <HAL_TIM_PWM_Start+0xaa>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d104      	bne.n	80025b6 <HAL_TIM_PWM_Start+0x92>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b4:	e00b      	b.n	80025ce <HAL_TIM_PWM_Start+0xaa>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d104      	bne.n	80025c6 <HAL_TIM_PWM_Start+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	e003      	b.n	80025ce <HAL_TIM_PWM_Start+0xaa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fcb8 	bl	8002f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2d      	ldr	r2, [pc, #180]	; (8002698 <HAL_TIM_PWM_Start+0x174>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_TIM_PWM_Start+0xcc>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2c      	ldr	r2, [pc, #176]	; (800269c <HAL_TIM_PWM_Start+0x178>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_TIM_PWM_Start+0xd0>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_TIM_PWM_Start+0xd2>
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a22      	ldr	r2, [pc, #136]	; (8002698 <HAL_TIM_PWM_Start+0x174>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_TIM_PWM_Start+0x136>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d01d      	beq.n	800265a <HAL_TIM_PWM_Start+0x136>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <HAL_TIM_PWM_Start+0x17c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d018      	beq.n	800265a <HAL_TIM_PWM_Start+0x136>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_TIM_PWM_Start+0x180>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_TIM_PWM_Start+0x136>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <HAL_TIM_PWM_Start+0x184>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_TIM_PWM_Start+0x136>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_TIM_PWM_Start+0x178>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_TIM_PWM_Start+0x136>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_TIM_PWM_Start+0x188>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <HAL_TIM_PWM_Start+0x136>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_TIM_PWM_Start+0x18c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d111      	bne.n	800267e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b06      	cmp	r3, #6
 800266a:	d010      	beq.n	800268e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267c:	e007      	b.n	800268e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40010000 	.word	0x40010000
 800269c:	40010400 	.word	0x40010400
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40000c00 	.word	0x40000c00
 80026ac:	40014000 	.word	0x40014000
 80026b0:	40001800 	.word	0x40001800

080026b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0202 	mvn.w	r2, #2
 80026e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f9ba 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f9ac 	bl	8002a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f9bd 	bl	8002a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0204 	mvn.w	r2, #4
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f990 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f982 	bl	8002a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f993 	bl	8002a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b08      	cmp	r3, #8
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0208 	mvn.w	r2, #8
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f966 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f958 	bl	8002a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f969 	bl	8002a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0210 	mvn.w	r2, #16
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2208      	movs	r2, #8
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f93c 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f92e 	bl	8002a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f93f 	bl	8002a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f908 	bl	8002a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b80      	cmp	r3, #128	; 0x80
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d107      	bne.n	8002864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fba3 	bl	8002faa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d107      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f904 	bl	8002a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0220 	mvn.w	r2, #32
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fb6d 	bl	8002f96 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028de:	2302      	movs	r3, #2
 80028e0:	e0ae      	b.n	8002a40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	f200 809f 	bhi.w	8002a30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	0800292d 	.word	0x0800292d
 80028fc:	08002a31 	.word	0x08002a31
 8002900:	08002a31 	.word	0x08002a31
 8002904:	08002a31 	.word	0x08002a31
 8002908:	0800296d 	.word	0x0800296d
 800290c:	08002a31 	.word	0x08002a31
 8002910:	08002a31 	.word	0x08002a31
 8002914:	08002a31 	.word	0x08002a31
 8002918:	080029af 	.word	0x080029af
 800291c:	08002a31 	.word	0x08002a31
 8002920:	08002a31 	.word	0x08002a31
 8002924:	08002a31 	.word	0x08002a31
 8002928:	080029ef 	.word	0x080029ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f95a 	bl	8002bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0208 	orr.w	r2, r2, #8
 8002946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0204 	bic.w	r2, r2, #4
 8002956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6999      	ldr	r1, [r3, #24]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	619a      	str	r2, [r3, #24]
      break;
 800296a:	e064      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f9aa 	bl	8002ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6999      	ldr	r1, [r3, #24]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	021a      	lsls	r2, r3, #8
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	619a      	str	r2, [r3, #24]
      break;
 80029ac:	e043      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f9ff 	bl	8002db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0208 	orr.w	r2, r2, #8
 80029c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0204 	bic.w	r2, r2, #4
 80029d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69d9      	ldr	r1, [r3, #28]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	61da      	str	r2, [r3, #28]
      break;
 80029ec:	e023      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fa53 	bl	8002ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69d9      	ldr	r1, [r3, #28]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	61da      	str	r2, [r3, #28]
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	75fb      	strb	r3, [r7, #23]
      break;
 8002a34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <TIM_Base_SetConfig+0x114>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aca:	d00f      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	; (8002bc4 <TIM_Base_SetConfig+0x118>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <TIM_Base_SetConfig+0x11c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <TIM_Base_SetConfig+0x120>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <TIM_Base_SetConfig+0x124>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <TIM_Base_SetConfig+0x114>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d02b      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d027      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <TIM_Base_SetConfig+0x118>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d023      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <TIM_Base_SetConfig+0x11c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a2a      	ldr	r2, [pc, #168]	; (8002bcc <TIM_Base_SetConfig+0x120>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01b      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a29      	ldr	r2, [pc, #164]	; (8002bd0 <TIM_Base_SetConfig+0x124>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d017      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <TIM_Base_SetConfig+0x128>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <TIM_Base_SetConfig+0x12c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00f      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <TIM_Base_SetConfig+0x130>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00b      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <TIM_Base_SetConfig+0x134>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <TIM_Base_SetConfig+0x138>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a23      	ldr	r2, [pc, #140]	; (8002be8 <TIM_Base_SetConfig+0x13c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <TIM_Base_SetConfig+0x114>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d003      	beq.n	8002ba4 <TIM_Base_SetConfig+0xf8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	; (8002bd0 <TIM_Base_SetConfig+0x124>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d103      	bne.n	8002bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	615a      	str	r2, [r3, #20]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	40000c00 	.word	0x40000c00
 8002bd0:	40010400 	.word	0x40010400
 8002bd4:	40014000 	.word	0x40014000
 8002bd8:	40014400 	.word	0x40014400
 8002bdc:	40014800 	.word	0x40014800
 8002be0:	40001800 	.word	0x40001800
 8002be4:	40001c00 	.word	0x40001c00
 8002be8:	40002000 	.word	0x40002000

08002bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 0302 	bic.w	r3, r3, #2
 8002c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <TIM_OC1_SetConfig+0xd8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_OC1_SetConfig+0x64>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <TIM_OC1_SetConfig+0xdc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10c      	bne.n	8002c6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0308 	bic.w	r3, r3, #8
 8002c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <TIM_OC1_SetConfig+0xd8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_OC1_SetConfig+0x8e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <TIM_OC1_SetConfig+0xdc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d111      	bne.n	8002c9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40010400 	.word	0x40010400

08002ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0210 	bic.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0320 	bic.w	r3, r3, #32
 8002d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <TIM_OC2_SetConfig+0xe4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_OC2_SetConfig+0x68>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <TIM_OC2_SetConfig+0xe8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10d      	bne.n	8002d50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <TIM_OC2_SetConfig+0xe4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_OC2_SetConfig+0x94>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <TIM_OC2_SetConfig+0xe8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d113      	bne.n	8002d88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40010400 	.word	0x40010400

08002db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <TIM_OC3_SetConfig+0xe0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_OC3_SetConfig+0x66>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <TIM_OC3_SetConfig+0xe4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d10d      	bne.n	8002e3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <TIM_OC3_SetConfig+0xe0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_OC3_SetConfig+0x92>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <TIM_OC3_SetConfig+0xe4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d113      	bne.n	8002e72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	621a      	str	r2, [r3, #32]
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40010400 	.word	0x40010400

08002ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	031b      	lsls	r3, r3, #12
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <TIM_OC4_SetConfig+0xa4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_OC4_SetConfig+0x68>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <TIM_OC4_SetConfig+0xa8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d109      	bne.n	8002f1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	019b      	lsls	r3, r3, #6
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40010400 	.word	0x40010400

08002f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2201      	movs	r2, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e03f      	b.n	8003050 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fe f907 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2224      	movs	r2, #36	; 0x24
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003000:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fd24 	bl	8003a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003016:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003026:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003036:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	d130      	bne.n	80030d4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_UART_Transmit_IT+0x26>
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e029      	b.n	80030d6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_UART_Transmit_IT+0x38>
 800308c:	2302      	movs	r3, #2
 800308e:	e022      	b.n	80030d6 <HAL_UART_Transmit_IT+0x7e>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	88fa      	ldrh	r2, [r7, #6]
 80030a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2221      	movs	r2, #33	; 0x21
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d11d      	bne.n	8003138 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_UART_Receive_IT+0x26>
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e016      	b.n	800313a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_UART_Receive_IT+0x38>
 8003116:	2302      	movs	r3, #2
 8003118:	e00f      	b.n	800313a <HAL_UART_Receive_IT+0x58>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	461a      	mov	r2, r3
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fab6 	bl	80036a0 <UART_Start_Receive_IT>
 8003134:	4603      	mov	r3, r0
 8003136:	e000      	b.n	800313a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b0ba      	sub	sp, #232	; 0xe8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003182:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_UART_IRQHandler+0x66>
 8003196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fb99 	bl	80038da <UART_Receive_IT>
      return;
 80031a8:	e256      	b.n	8003658 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80de 	beq.w	8003370 <HAL_UART_IRQHandler+0x22c>
 80031b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80d1 	beq.w	8003370 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_UART_IRQHandler+0xae>
 80031da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_UART_IRQHandler+0xd2>
 80031fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f043 0202 	orr.w	r2, r3, #2
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_UART_IRQHandler+0xf6>
 8003222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f043 0204 	orr.w	r2, r3, #4
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d011      	beq.n	800326a <HAL_UART_IRQHandler+0x126>
 8003246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f043 0208 	orr.w	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 81ed 	beq.w	800364e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_UART_IRQHandler+0x14e>
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fb24 	bl	80038da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b40      	cmp	r3, #64	; 0x40
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_UART_IRQHandler+0x17a>
 80032b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04f      	beq.n	800335e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa2c 	bl	800371c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d141      	bne.n	8003356 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3314      	adds	r3, #20
 80032d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3314      	adds	r3, #20
 80032fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800330a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1d9      	bne.n	80032d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	2b00      	cmp	r3, #0
 8003324:	d013      	beq.n	800334e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	4a7d      	ldr	r2, [pc, #500]	; (8003520 <HAL_UART_IRQHandler+0x3dc>)
 800332c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fa36 	bl	80017a4 <HAL_DMA_Abort_IT>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003348:	4610      	mov	r0, r2
 800334a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	e00e      	b.n	800336c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f990 	bl	8003674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003354:	e00a      	b.n	800336c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f98c 	bl	8003674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	e006      	b.n	800336c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f988 	bl	8003674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800336a:	e170      	b.n	800364e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	bf00      	nop
    return;
 800336e:	e16e      	b.n	800364e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	2b01      	cmp	r3, #1
 8003376:	f040 814a 	bne.w	800360e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8143 	beq.w	800360e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 813c 	beq.w	800360e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	f040 80b4 	bne.w	8003524 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8140 	beq.w	8003652 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033da:	429a      	cmp	r2, r3
 80033dc:	f080 8139 	bcs.w	8003652 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f2:	f000 8088 	beq.w	8003506 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800340c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800342e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800343a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1d9      	bne.n	80033f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3314      	adds	r3, #20
 8003448:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003466:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800346a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800346e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e1      	bne.n	8003442 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3314      	adds	r3, #20
 8003484:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e3      	bne.n	800347e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d6:	f023 0310 	bic.w	r3, r3, #16
 80034da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80034ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e3      	bne.n	80034c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe f8df 	bl	80016c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350e:	b29b      	uxth	r3, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	b29b      	uxth	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8b6 	bl	8003688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800351c:	e099      	b.n	8003652 <HAL_UART_IRQHandler+0x50e>
 800351e:	bf00      	nop
 8003520:	080037e3 	.word	0x080037e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352c:	b29b      	uxth	r3, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 808b 	beq.w	8003656 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8086 	beq.w	8003656 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800355a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800356e:	647a      	str	r2, [r7, #68]	; 0x44
 8003570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e3      	bne.n	800354a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	623b      	str	r3, [r7, #32]
   return(result);
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035a6:	633a      	str	r2, [r7, #48]	; 0x30
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e3      	bne.n	8003582 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0310 	bic.w	r3, r3, #16
 80035de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035ec:	61fa      	str	r2, [r7, #28]
 80035ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	69b9      	ldr	r1, [r7, #24]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	617b      	str	r3, [r7, #20]
   return(result);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e3      	bne.n	80035c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f83e 	bl	8003688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800360c:	e023      	b.n	8003656 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_UART_IRQHandler+0x4ea>
 800361a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8ef 	bl	800380a <UART_Transmit_IT>
    return;
 800362c:	e014      	b.n	8003658 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00e      	beq.n	8003658 <HAL_UART_IRQHandler+0x514>
 800363a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f92f 	bl	80038aa <UART_EndTransmit_IT>
    return;
 800364c:	e004      	b.n	8003658 <HAL_UART_IRQHandler+0x514>
    return;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <HAL_UART_IRQHandler+0x514>
      return;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <HAL_UART_IRQHandler+0x514>
      return;
 8003656:	bf00      	nop
  }
}
 8003658:	37e8      	adds	r7, #232	; 0xe8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop

08003660 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	88fa      	ldrh	r2, [r7, #6]
 80036be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2222      	movs	r2, #34	; 0x22
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0220 	orr.w	r2, r2, #32
 800370c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b095      	sub	sp, #84	; 0x54
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800373a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003744:	643a      	str	r2, [r7, #64]	; 0x40
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800374a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3314      	adds	r3, #20
 800375e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	61fb      	str	r3, [r7, #28]
   return(result);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3314      	adds	r3, #20
 8003776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003778:	62fa      	str	r2, [r7, #44]	; 0x2c
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800377e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	2b01      	cmp	r3, #1
 8003792:	d119      	bne.n	80037c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f023 0310 	bic.w	r3, r3, #16
 80037aa:	647b      	str	r3, [r7, #68]	; 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037b4:	61ba      	str	r2, [r7, #24]
 80037b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6979      	ldr	r1, [r7, #20]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	613b      	str	r3, [r7, #16]
   return(result);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037d6:	bf00      	nop
 80037d8:	3754      	adds	r7, #84	; 0x54
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff ff39 	bl	8003674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b21      	cmp	r3, #33	; 0x21
 800381c:	d13e      	bne.n	800389c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003826:	d114      	bne.n	8003852 <UART_Transmit_IT+0x48>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d110      	bne.n	8003852 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003844:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	1c9a      	adds	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	621a      	str	r2, [r3, #32]
 8003850:	e008      	b.n	8003864 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6211      	str	r1, [r2, #32]
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29b      	uxth	r3, r3
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4619      	mov	r1, r3
 8003872:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10f      	bne.n	8003898 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003886:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003896:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fec8 	bl	8003660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b08c      	sub	sp, #48	; 0x30
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b22      	cmp	r3, #34	; 0x22
 80038ec:	f040 80ab 	bne.w	8003a46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f8:	d117      	bne.n	800392a <UART_Receive_IT+0x50>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d113      	bne.n	800392a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b29b      	uxth	r3, r3
 8003914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003918:	b29a      	uxth	r2, r3
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	1c9a      	adds	r2, r3, #2
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
 8003928:	e026      	b.n	8003978 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003930:	2300      	movs	r3, #0
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393c:	d007      	beq.n	800394e <UART_Receive_IT+0x74>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <UART_Receive_IT+0x82>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e008      	b.n	800396e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003968:	b2da      	uxtb	r2, r3
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29b      	uxth	r3, r3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4619      	mov	r1, r3
 8003986:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003988:	2b00      	cmp	r3, #0
 800398a:	d15a      	bne.n	8003a42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0220 	bic.w	r2, r2, #32
 800399a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d135      	bne.n	8003a38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	613b      	str	r3, [r7, #16]
   return(result);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f023 0310 	bic.w	r3, r3, #16
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	623a      	str	r2, [r7, #32]
 80039f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	69f9      	ldr	r1, [r7, #28]
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e5      	bne.n	80039d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d10a      	bne.n	8003a2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fe29 	bl	8003688 <HAL_UARTEx_RxEventCallback>
 8003a36:	e002      	b.n	8003a3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fd fa47 	bl	8000ecc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e002      	b.n	8003a48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3730      	adds	r7, #48	; 0x30
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a54:	b0c0      	sub	sp, #256	; 0x100
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	68d9      	ldr	r1, [r3, #12]
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	ea40 0301 	orr.w	r3, r0, r1
 8003a78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003aa8:	f021 010c 	bic.w	r1, r1, #12
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	6999      	ldr	r1, [r3, #24]
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	ea40 0301 	orr.w	r3, r0, r1
 8003ad6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b8f      	ldr	r3, [pc, #572]	; (8003d1c <UART_SetConfig+0x2cc>)
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d005      	beq.n	8003af0 <UART_SetConfig+0xa0>
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b8d      	ldr	r3, [pc, #564]	; (8003d20 <UART_SetConfig+0x2d0>)
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d104      	bne.n	8003afa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af0:	f7fe fcb4 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8003af4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003af8:	e003      	b.n	8003b02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003afa:	f7fe fc9b 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003afe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0c:	f040 810c 	bne.w	8003d28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b14:	2200      	movs	r2, #0
 8003b16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	1891      	adds	r1, r2, r2
 8003b28:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b2a:	415b      	adcs	r3, r3
 8003b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b32:	4621      	mov	r1, r4
 8003b34:	eb12 0801 	adds.w	r8, r2, r1
 8003b38:	4629      	mov	r1, r5
 8003b3a:	eb43 0901 	adc.w	r9, r3, r1
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b52:	4690      	mov	r8, r2
 8003b54:	4699      	mov	r9, r3
 8003b56:	4623      	mov	r3, r4
 8003b58:	eb18 0303 	adds.w	r3, r8, r3
 8003b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b60:	462b      	mov	r3, r5
 8003b62:	eb49 0303 	adc.w	r3, r9, r3
 8003b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b7e:	460b      	mov	r3, r1
 8003b80:	18db      	adds	r3, r3, r3
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
 8003b84:	4613      	mov	r3, r2
 8003b86:	eb42 0303 	adc.w	r3, r2, r3
 8003b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b94:	f7fc fb74 	bl	8000280 <__aeabi_uldivmod>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4b61      	ldr	r3, [pc, #388]	; (8003d24 <UART_SetConfig+0x2d4>)
 8003b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	011c      	lsls	r4, r3, #4
 8003ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bb8:	4642      	mov	r2, r8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	1891      	adds	r1, r2, r2
 8003bbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bc0:	415b      	adcs	r3, r3
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bc8:	4641      	mov	r1, r8
 8003bca:	eb12 0a01 	adds.w	sl, r2, r1
 8003bce:	4649      	mov	r1, r9
 8003bd0:	eb43 0b01 	adc.w	fp, r3, r1
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003be0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003be4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003be8:	4692      	mov	sl, r2
 8003bea:	469b      	mov	fp, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	eb1a 0303 	adds.w	r3, sl, r3
 8003bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c14:	460b      	mov	r3, r1
 8003c16:	18db      	adds	r3, r3, r3
 8003c18:	643b      	str	r3, [r7, #64]	; 0x40
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	647b      	str	r3, [r7, #68]	; 0x44
 8003c22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c2a:	f7fc fb29 	bl	8000280 <__aeabi_uldivmod>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4611      	mov	r1, r2
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <UART_SetConfig+0x2d4>)
 8003c36:	fba3 2301 	umull	r2, r3, r3, r1
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2264      	movs	r2, #100	; 0x64
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	1acb      	subs	r3, r1, r3
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c4a:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <UART_SetConfig+0x2d4>)
 8003c4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c58:	441c      	add	r4, r3
 8003c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	1891      	adds	r1, r2, r2
 8003c72:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c74:	415b      	adcs	r3, r3
 8003c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	1851      	adds	r1, r2, r1
 8003c80:	6339      	str	r1, [r7, #48]	; 0x30
 8003c82:	4649      	mov	r1, r9
 8003c84:	414b      	adcs	r3, r1
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c94:	4659      	mov	r1, fp
 8003c96:	00cb      	lsls	r3, r1, #3
 8003c98:	4651      	mov	r1, sl
 8003c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	00ca      	lsls	r2, r1, #3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4642      	mov	r2, r8
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb0:	464b      	mov	r3, r9
 8003cb2:	460a      	mov	r2, r1
 8003cb4:	eb42 0303 	adc.w	r3, r2, r3
 8003cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ccc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	18db      	adds	r3, r3, r3
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	eb42 0303 	adc.w	r3, r2, r3
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ce2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ce6:	f7fc facb 	bl	8000280 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <UART_SetConfig+0x2d4>)
 8003cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	2164      	movs	r1, #100	; 0x64
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	3332      	adds	r3, #50	; 0x32
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <UART_SetConfig+0x2d4>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	f003 0207 	and.w	r2, r3, #7
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4422      	add	r2, r4
 8003d16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d18:	e105      	b.n	8003f26 <UART_SetConfig+0x4d6>
 8003d1a:	bf00      	nop
 8003d1c:	40011000 	.word	0x40011000
 8003d20:	40011400 	.word	0x40011400
 8003d24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d3a:	4642      	mov	r2, r8
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	1891      	adds	r1, r2, r2
 8003d40:	6239      	str	r1, [r7, #32]
 8003d42:	415b      	adcs	r3, r3
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	1854      	adds	r4, r2, r1
 8003d4e:	4649      	mov	r1, r9
 8003d50:	eb43 0501 	adc.w	r5, r3, r1
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	00eb      	lsls	r3, r5, #3
 8003d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d62:	00e2      	lsls	r2, r4, #3
 8003d64:	4614      	mov	r4, r2
 8003d66:	461d      	mov	r5, r3
 8003d68:	4643      	mov	r3, r8
 8003d6a:	18e3      	adds	r3, r4, r3
 8003d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d70:	464b      	mov	r3, r9
 8003d72:	eb45 0303 	adc.w	r3, r5, r3
 8003d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d96:	4629      	mov	r1, r5
 8003d98:	008b      	lsls	r3, r1, #2
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da0:	4621      	mov	r1, r4
 8003da2:	008a      	lsls	r2, r1, #2
 8003da4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003da8:	f7fc fa6a 	bl	8000280 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4b60      	ldr	r3, [pc, #384]	; (8003f34 <UART_SetConfig+0x4e4>)
 8003db2:	fba3 2302 	umull	r2, r3, r3, r2
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	011c      	lsls	r4, r3, #4
 8003dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	1891      	adds	r1, r2, r2
 8003dd2:	61b9      	str	r1, [r7, #24]
 8003dd4:	415b      	adcs	r3, r3
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ddc:	4641      	mov	r1, r8
 8003dde:	1851      	adds	r1, r2, r1
 8003de0:	6139      	str	r1, [r7, #16]
 8003de2:	4649      	mov	r1, r9
 8003de4:	414b      	adcs	r3, r1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003df4:	4659      	mov	r1, fp
 8003df6:	00cb      	lsls	r3, r1, #3
 8003df8:	4651      	mov	r1, sl
 8003dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfe:	4651      	mov	r1, sl
 8003e00:	00ca      	lsls	r2, r1, #3
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	4642      	mov	r2, r8
 8003e0a:	189b      	adds	r3, r3, r2
 8003e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e10:	464b      	mov	r3, r9
 8003e12:	460a      	mov	r2, r1
 8003e14:	eb42 0303 	adc.w	r3, r2, r3
 8003e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e34:	4649      	mov	r1, r9
 8003e36:	008b      	lsls	r3, r1, #2
 8003e38:	4641      	mov	r1, r8
 8003e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e3e:	4641      	mov	r1, r8
 8003e40:	008a      	lsls	r2, r1, #2
 8003e42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e46:	f7fc fa1b 	bl	8000280 <__aeabi_uldivmod>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <UART_SetConfig+0x4e4>)
 8003e50:	fba3 1302 	umull	r1, r3, r3, r2
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	2164      	movs	r1, #100	; 0x64
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	3332      	adds	r3, #50	; 0x32
 8003e62:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <UART_SetConfig+0x4e4>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e6e:	441c      	add	r4, r3
 8003e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e74:	2200      	movs	r2, #0
 8003e76:	673b      	str	r3, [r7, #112]	; 0x70
 8003e78:	677a      	str	r2, [r7, #116]	; 0x74
 8003e7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e7e:	4642      	mov	r2, r8
 8003e80:	464b      	mov	r3, r9
 8003e82:	1891      	adds	r1, r2, r2
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	415b      	adcs	r3, r3
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e8e:	4641      	mov	r1, r8
 8003e90:	1851      	adds	r1, r2, r1
 8003e92:	6039      	str	r1, [r7, #0]
 8003e94:	4649      	mov	r1, r9
 8003e96:	414b      	adcs	r3, r1
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ea6:	4659      	mov	r1, fp
 8003ea8:	00cb      	lsls	r3, r1, #3
 8003eaa:	4651      	mov	r1, sl
 8003eac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	00ca      	lsls	r2, r1, #3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4642      	mov	r2, r8
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	eb42 0303 	adc.w	r3, r2, r3
 8003ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	008b      	lsls	r3, r1, #2
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eec:	4641      	mov	r1, r8
 8003eee:	008a      	lsls	r2, r1, #2
 8003ef0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ef4:	f7fc f9c4 	bl	8000280 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <UART_SetConfig+0x4e4>)
 8003efe:	fba3 1302 	umull	r1, r3, r3, r2
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2164      	movs	r1, #100	; 0x64
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	3332      	adds	r3, #50	; 0x32
 8003f10:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <UART_SetConfig+0x4e4>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	f003 020f 	and.w	r2, r3, #15
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4422      	add	r2, r4
 8003f24:	609a      	str	r2, [r3, #8]
}
 8003f26:	bf00      	nop
 8003f28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f32:	bf00      	nop
 8003f34:	51eb851f 	.word	0x51eb851f

08003f38 <__libc_init_array>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	4d0d      	ldr	r5, [pc, #52]	; (8003f70 <__libc_init_array+0x38>)
 8003f3c:	4c0d      	ldr	r4, [pc, #52]	; (8003f74 <__libc_init_array+0x3c>)
 8003f3e:	1b64      	subs	r4, r4, r5
 8003f40:	10a4      	asrs	r4, r4, #2
 8003f42:	2600      	movs	r6, #0
 8003f44:	42a6      	cmp	r6, r4
 8003f46:	d109      	bne.n	8003f5c <__libc_init_array+0x24>
 8003f48:	4d0b      	ldr	r5, [pc, #44]	; (8003f78 <__libc_init_array+0x40>)
 8003f4a:	4c0c      	ldr	r4, [pc, #48]	; (8003f7c <__libc_init_array+0x44>)
 8003f4c:	f000 fc9c 	bl	8004888 <_init>
 8003f50:	1b64      	subs	r4, r4, r5
 8003f52:	10a4      	asrs	r4, r4, #2
 8003f54:	2600      	movs	r6, #0
 8003f56:	42a6      	cmp	r6, r4
 8003f58:	d105      	bne.n	8003f66 <__libc_init_array+0x2e>
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f60:	4798      	blx	r3
 8003f62:	3601      	adds	r6, #1
 8003f64:	e7ee      	b.n	8003f44 <__libc_init_array+0xc>
 8003f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6a:	4798      	blx	r3
 8003f6c:	3601      	adds	r6, #1
 8003f6e:	e7f2      	b.n	8003f56 <__libc_init_array+0x1e>
 8003f70:	08004cb0 	.word	0x08004cb0
 8003f74:	08004cb0 	.word	0x08004cb0
 8003f78:	08004cb0 	.word	0x08004cb0
 8003f7c:	08004cb4 	.word	0x08004cb4

08003f80 <memset>:
 8003f80:	4402      	add	r2, r0
 8003f82:	4603      	mov	r3, r0
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d100      	bne.n	8003f8a <memset+0xa>
 8003f88:	4770      	bx	lr
 8003f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f8e:	e7f9      	b.n	8003f84 <memset+0x4>

08003f90 <siprintf>:
 8003f90:	b40e      	push	{r1, r2, r3}
 8003f92:	b500      	push	{lr}
 8003f94:	b09c      	sub	sp, #112	; 0x70
 8003f96:	ab1d      	add	r3, sp, #116	; 0x74
 8003f98:	9002      	str	r0, [sp, #8]
 8003f9a:	9006      	str	r0, [sp, #24]
 8003f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fa0:	4809      	ldr	r0, [pc, #36]	; (8003fc8 <siprintf+0x38>)
 8003fa2:	9107      	str	r1, [sp, #28]
 8003fa4:	9104      	str	r1, [sp, #16]
 8003fa6:	4909      	ldr	r1, [pc, #36]	; (8003fcc <siprintf+0x3c>)
 8003fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fac:	9105      	str	r1, [sp, #20]
 8003fae:	6800      	ldr	r0, [r0, #0]
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	a902      	add	r1, sp, #8
 8003fb4:	f000 f868 	bl	8004088 <_svfiprintf_r>
 8003fb8:	9b02      	ldr	r3, [sp, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	b01c      	add	sp, #112	; 0x70
 8003fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fc4:	b003      	add	sp, #12
 8003fc6:	4770      	bx	lr
 8003fc8:	200000d8 	.word	0x200000d8
 8003fcc:	ffff0208 	.word	0xffff0208

08003fd0 <__ssputs_r>:
 8003fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	688e      	ldr	r6, [r1, #8]
 8003fd6:	429e      	cmp	r6, r3
 8003fd8:	4682      	mov	sl, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	4690      	mov	r8, r2
 8003fde:	461f      	mov	r7, r3
 8003fe0:	d838      	bhi.n	8004054 <__ssputs_r+0x84>
 8003fe2:	898a      	ldrh	r2, [r1, #12]
 8003fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fe8:	d032      	beq.n	8004050 <__ssputs_r+0x80>
 8003fea:	6825      	ldr	r5, [r4, #0]
 8003fec:	6909      	ldr	r1, [r1, #16]
 8003fee:	eba5 0901 	sub.w	r9, r5, r1
 8003ff2:	6965      	ldr	r5, [r4, #20]
 8003ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	444b      	add	r3, r9
 8004000:	106d      	asrs	r5, r5, #1
 8004002:	429d      	cmp	r5, r3
 8004004:	bf38      	it	cc
 8004006:	461d      	movcc	r5, r3
 8004008:	0553      	lsls	r3, r2, #21
 800400a:	d531      	bpl.n	8004070 <__ssputs_r+0xa0>
 800400c:	4629      	mov	r1, r5
 800400e:	f000 fb63 	bl	80046d8 <_malloc_r>
 8004012:	4606      	mov	r6, r0
 8004014:	b950      	cbnz	r0, 800402c <__ssputs_r+0x5c>
 8004016:	230c      	movs	r3, #12
 8004018:	f8ca 3000 	str.w	r3, [sl]
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004022:	81a3      	strh	r3, [r4, #12]
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	6921      	ldr	r1, [r4, #16]
 800402e:	464a      	mov	r2, r9
 8004030:	f000 fabe 	bl	80045b0 <memcpy>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800403a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403e:	81a3      	strh	r3, [r4, #12]
 8004040:	6126      	str	r6, [r4, #16]
 8004042:	6165      	str	r5, [r4, #20]
 8004044:	444e      	add	r6, r9
 8004046:	eba5 0509 	sub.w	r5, r5, r9
 800404a:	6026      	str	r6, [r4, #0]
 800404c:	60a5      	str	r5, [r4, #8]
 800404e:	463e      	mov	r6, r7
 8004050:	42be      	cmp	r6, r7
 8004052:	d900      	bls.n	8004056 <__ssputs_r+0x86>
 8004054:	463e      	mov	r6, r7
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	4632      	mov	r2, r6
 800405a:	4641      	mov	r1, r8
 800405c:	f000 fab6 	bl	80045cc <memmove>
 8004060:	68a3      	ldr	r3, [r4, #8]
 8004062:	1b9b      	subs	r3, r3, r6
 8004064:	60a3      	str	r3, [r4, #8]
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	4433      	add	r3, r6
 800406a:	6023      	str	r3, [r4, #0]
 800406c:	2000      	movs	r0, #0
 800406e:	e7db      	b.n	8004028 <__ssputs_r+0x58>
 8004070:	462a      	mov	r2, r5
 8004072:	f000 fba5 	bl	80047c0 <_realloc_r>
 8004076:	4606      	mov	r6, r0
 8004078:	2800      	cmp	r0, #0
 800407a:	d1e1      	bne.n	8004040 <__ssputs_r+0x70>
 800407c:	6921      	ldr	r1, [r4, #16]
 800407e:	4650      	mov	r0, sl
 8004080:	f000 fabe 	bl	8004600 <_free_r>
 8004084:	e7c7      	b.n	8004016 <__ssputs_r+0x46>
	...

08004088 <_svfiprintf_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	4698      	mov	r8, r3
 800408e:	898b      	ldrh	r3, [r1, #12]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	b09d      	sub	sp, #116	; 0x74
 8004094:	4607      	mov	r7, r0
 8004096:	460d      	mov	r5, r1
 8004098:	4614      	mov	r4, r2
 800409a:	d50e      	bpl.n	80040ba <_svfiprintf_r+0x32>
 800409c:	690b      	ldr	r3, [r1, #16]
 800409e:	b963      	cbnz	r3, 80040ba <_svfiprintf_r+0x32>
 80040a0:	2140      	movs	r1, #64	; 0x40
 80040a2:	f000 fb19 	bl	80046d8 <_malloc_r>
 80040a6:	6028      	str	r0, [r5, #0]
 80040a8:	6128      	str	r0, [r5, #16]
 80040aa:	b920      	cbnz	r0, 80040b6 <_svfiprintf_r+0x2e>
 80040ac:	230c      	movs	r3, #12
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	e0d1      	b.n	800425a <_svfiprintf_r+0x1d2>
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	616b      	str	r3, [r5, #20]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9309      	str	r3, [sp, #36]	; 0x24
 80040be:	2320      	movs	r3, #32
 80040c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040c8:	2330      	movs	r3, #48	; 0x30
 80040ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004274 <_svfiprintf_r+0x1ec>
 80040ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040d2:	f04f 0901 	mov.w	r9, #1
 80040d6:	4623      	mov	r3, r4
 80040d8:	469a      	mov	sl, r3
 80040da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040de:	b10a      	cbz	r2, 80040e4 <_svfiprintf_r+0x5c>
 80040e0:	2a25      	cmp	r2, #37	; 0x25
 80040e2:	d1f9      	bne.n	80040d8 <_svfiprintf_r+0x50>
 80040e4:	ebba 0b04 	subs.w	fp, sl, r4
 80040e8:	d00b      	beq.n	8004102 <_svfiprintf_r+0x7a>
 80040ea:	465b      	mov	r3, fp
 80040ec:	4622      	mov	r2, r4
 80040ee:	4629      	mov	r1, r5
 80040f0:	4638      	mov	r0, r7
 80040f2:	f7ff ff6d 	bl	8003fd0 <__ssputs_r>
 80040f6:	3001      	adds	r0, #1
 80040f8:	f000 80aa 	beq.w	8004250 <_svfiprintf_r+0x1c8>
 80040fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040fe:	445a      	add	r2, fp
 8004100:	9209      	str	r2, [sp, #36]	; 0x24
 8004102:	f89a 3000 	ldrb.w	r3, [sl]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80a2 	beq.w	8004250 <_svfiprintf_r+0x1c8>
 800410c:	2300      	movs	r3, #0
 800410e:	f04f 32ff 	mov.w	r2, #4294967295
 8004112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004116:	f10a 0a01 	add.w	sl, sl, #1
 800411a:	9304      	str	r3, [sp, #16]
 800411c:	9307      	str	r3, [sp, #28]
 800411e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004122:	931a      	str	r3, [sp, #104]	; 0x68
 8004124:	4654      	mov	r4, sl
 8004126:	2205      	movs	r2, #5
 8004128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800412c:	4851      	ldr	r0, [pc, #324]	; (8004274 <_svfiprintf_r+0x1ec>)
 800412e:	f7fc f857 	bl	80001e0 <memchr>
 8004132:	9a04      	ldr	r2, [sp, #16]
 8004134:	b9d8      	cbnz	r0, 800416e <_svfiprintf_r+0xe6>
 8004136:	06d0      	lsls	r0, r2, #27
 8004138:	bf44      	itt	mi
 800413a:	2320      	movmi	r3, #32
 800413c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004140:	0711      	lsls	r1, r2, #28
 8004142:	bf44      	itt	mi
 8004144:	232b      	movmi	r3, #43	; 0x2b
 8004146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800414a:	f89a 3000 	ldrb.w	r3, [sl]
 800414e:	2b2a      	cmp	r3, #42	; 0x2a
 8004150:	d015      	beq.n	800417e <_svfiprintf_r+0xf6>
 8004152:	9a07      	ldr	r2, [sp, #28]
 8004154:	4654      	mov	r4, sl
 8004156:	2000      	movs	r0, #0
 8004158:	f04f 0c0a 	mov.w	ip, #10
 800415c:	4621      	mov	r1, r4
 800415e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004162:	3b30      	subs	r3, #48	; 0x30
 8004164:	2b09      	cmp	r3, #9
 8004166:	d94e      	bls.n	8004206 <_svfiprintf_r+0x17e>
 8004168:	b1b0      	cbz	r0, 8004198 <_svfiprintf_r+0x110>
 800416a:	9207      	str	r2, [sp, #28]
 800416c:	e014      	b.n	8004198 <_svfiprintf_r+0x110>
 800416e:	eba0 0308 	sub.w	r3, r0, r8
 8004172:	fa09 f303 	lsl.w	r3, r9, r3
 8004176:	4313      	orrs	r3, r2
 8004178:	9304      	str	r3, [sp, #16]
 800417a:	46a2      	mov	sl, r4
 800417c:	e7d2      	b.n	8004124 <_svfiprintf_r+0x9c>
 800417e:	9b03      	ldr	r3, [sp, #12]
 8004180:	1d19      	adds	r1, r3, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	9103      	str	r1, [sp, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	bfbb      	ittet	lt
 800418a:	425b      	neglt	r3, r3
 800418c:	f042 0202 	orrlt.w	r2, r2, #2
 8004190:	9307      	strge	r3, [sp, #28]
 8004192:	9307      	strlt	r3, [sp, #28]
 8004194:	bfb8      	it	lt
 8004196:	9204      	strlt	r2, [sp, #16]
 8004198:	7823      	ldrb	r3, [r4, #0]
 800419a:	2b2e      	cmp	r3, #46	; 0x2e
 800419c:	d10c      	bne.n	80041b8 <_svfiprintf_r+0x130>
 800419e:	7863      	ldrb	r3, [r4, #1]
 80041a0:	2b2a      	cmp	r3, #42	; 0x2a
 80041a2:	d135      	bne.n	8004210 <_svfiprintf_r+0x188>
 80041a4:	9b03      	ldr	r3, [sp, #12]
 80041a6:	1d1a      	adds	r2, r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	9203      	str	r2, [sp, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bfb8      	it	lt
 80041b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80041b4:	3402      	adds	r4, #2
 80041b6:	9305      	str	r3, [sp, #20]
 80041b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004284 <_svfiprintf_r+0x1fc>
 80041bc:	7821      	ldrb	r1, [r4, #0]
 80041be:	2203      	movs	r2, #3
 80041c0:	4650      	mov	r0, sl
 80041c2:	f7fc f80d 	bl	80001e0 <memchr>
 80041c6:	b140      	cbz	r0, 80041da <_svfiprintf_r+0x152>
 80041c8:	2340      	movs	r3, #64	; 0x40
 80041ca:	eba0 000a 	sub.w	r0, r0, sl
 80041ce:	fa03 f000 	lsl.w	r0, r3, r0
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	4303      	orrs	r3, r0
 80041d6:	3401      	adds	r4, #1
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041de:	4826      	ldr	r0, [pc, #152]	; (8004278 <_svfiprintf_r+0x1f0>)
 80041e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041e4:	2206      	movs	r2, #6
 80041e6:	f7fb fffb 	bl	80001e0 <memchr>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d038      	beq.n	8004260 <_svfiprintf_r+0x1d8>
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <_svfiprintf_r+0x1f4>)
 80041f0:	bb1b      	cbnz	r3, 800423a <_svfiprintf_r+0x1b2>
 80041f2:	9b03      	ldr	r3, [sp, #12]
 80041f4:	3307      	adds	r3, #7
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	3308      	adds	r3, #8
 80041fc:	9303      	str	r3, [sp, #12]
 80041fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004200:	4433      	add	r3, r6
 8004202:	9309      	str	r3, [sp, #36]	; 0x24
 8004204:	e767      	b.n	80040d6 <_svfiprintf_r+0x4e>
 8004206:	fb0c 3202 	mla	r2, ip, r2, r3
 800420a:	460c      	mov	r4, r1
 800420c:	2001      	movs	r0, #1
 800420e:	e7a5      	b.n	800415c <_svfiprintf_r+0xd4>
 8004210:	2300      	movs	r3, #0
 8004212:	3401      	adds	r4, #1
 8004214:	9305      	str	r3, [sp, #20]
 8004216:	4619      	mov	r1, r3
 8004218:	f04f 0c0a 	mov.w	ip, #10
 800421c:	4620      	mov	r0, r4
 800421e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004222:	3a30      	subs	r2, #48	; 0x30
 8004224:	2a09      	cmp	r2, #9
 8004226:	d903      	bls.n	8004230 <_svfiprintf_r+0x1a8>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0c5      	beq.n	80041b8 <_svfiprintf_r+0x130>
 800422c:	9105      	str	r1, [sp, #20]
 800422e:	e7c3      	b.n	80041b8 <_svfiprintf_r+0x130>
 8004230:	fb0c 2101 	mla	r1, ip, r1, r2
 8004234:	4604      	mov	r4, r0
 8004236:	2301      	movs	r3, #1
 8004238:	e7f0      	b.n	800421c <_svfiprintf_r+0x194>
 800423a:	ab03      	add	r3, sp, #12
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	462a      	mov	r2, r5
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <_svfiprintf_r+0x1f8>)
 8004242:	a904      	add	r1, sp, #16
 8004244:	4638      	mov	r0, r7
 8004246:	f3af 8000 	nop.w
 800424a:	1c42      	adds	r2, r0, #1
 800424c:	4606      	mov	r6, r0
 800424e:	d1d6      	bne.n	80041fe <_svfiprintf_r+0x176>
 8004250:	89ab      	ldrh	r3, [r5, #12]
 8004252:	065b      	lsls	r3, r3, #25
 8004254:	f53f af2c 	bmi.w	80040b0 <_svfiprintf_r+0x28>
 8004258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800425a:	b01d      	add	sp, #116	; 0x74
 800425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004260:	ab03      	add	r3, sp, #12
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	462a      	mov	r2, r5
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <_svfiprintf_r+0x1f8>)
 8004268:	a904      	add	r1, sp, #16
 800426a:	4638      	mov	r0, r7
 800426c:	f000 f87a 	bl	8004364 <_printf_i>
 8004270:	e7eb      	b.n	800424a <_svfiprintf_r+0x1c2>
 8004272:	bf00      	nop
 8004274:	08004c74 	.word	0x08004c74
 8004278:	08004c7e 	.word	0x08004c7e
 800427c:	00000000 	.word	0x00000000
 8004280:	08003fd1 	.word	0x08003fd1
 8004284:	08004c7a 	.word	0x08004c7a

08004288 <_printf_common>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	4616      	mov	r6, r2
 800428e:	4699      	mov	r9, r3
 8004290:	688a      	ldr	r2, [r1, #8]
 8004292:	690b      	ldr	r3, [r1, #16]
 8004294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004298:	4293      	cmp	r3, r2
 800429a:	bfb8      	it	lt
 800429c:	4613      	movlt	r3, r2
 800429e:	6033      	str	r3, [r6, #0]
 80042a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042a4:	4607      	mov	r7, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	b10a      	cbz	r2, 80042ae <_printf_common+0x26>
 80042aa:	3301      	adds	r3, #1
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	0699      	lsls	r1, r3, #26
 80042b2:	bf42      	ittt	mi
 80042b4:	6833      	ldrmi	r3, [r6, #0]
 80042b6:	3302      	addmi	r3, #2
 80042b8:	6033      	strmi	r3, [r6, #0]
 80042ba:	6825      	ldr	r5, [r4, #0]
 80042bc:	f015 0506 	ands.w	r5, r5, #6
 80042c0:	d106      	bne.n	80042d0 <_printf_common+0x48>
 80042c2:	f104 0a19 	add.w	sl, r4, #25
 80042c6:	68e3      	ldr	r3, [r4, #12]
 80042c8:	6832      	ldr	r2, [r6, #0]
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	42ab      	cmp	r3, r5
 80042ce:	dc26      	bgt.n	800431e <_printf_common+0x96>
 80042d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042d4:	1e13      	subs	r3, r2, #0
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	bf18      	it	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	0692      	lsls	r2, r2, #26
 80042de:	d42b      	bmi.n	8004338 <_printf_common+0xb0>
 80042e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042e4:	4649      	mov	r1, r9
 80042e6:	4638      	mov	r0, r7
 80042e8:	47c0      	blx	r8
 80042ea:	3001      	adds	r0, #1
 80042ec:	d01e      	beq.n	800432c <_printf_common+0xa4>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	68e5      	ldr	r5, [r4, #12]
 80042f2:	6832      	ldr	r2, [r6, #0]
 80042f4:	f003 0306 	and.w	r3, r3, #6
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	bf08      	it	eq
 80042fc:	1aad      	subeq	r5, r5, r2
 80042fe:	68a3      	ldr	r3, [r4, #8]
 8004300:	6922      	ldr	r2, [r4, #16]
 8004302:	bf0c      	ite	eq
 8004304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004308:	2500      	movne	r5, #0
 800430a:	4293      	cmp	r3, r2
 800430c:	bfc4      	itt	gt
 800430e:	1a9b      	subgt	r3, r3, r2
 8004310:	18ed      	addgt	r5, r5, r3
 8004312:	2600      	movs	r6, #0
 8004314:	341a      	adds	r4, #26
 8004316:	42b5      	cmp	r5, r6
 8004318:	d11a      	bne.n	8004350 <_printf_common+0xc8>
 800431a:	2000      	movs	r0, #0
 800431c:	e008      	b.n	8004330 <_printf_common+0xa8>
 800431e:	2301      	movs	r3, #1
 8004320:	4652      	mov	r2, sl
 8004322:	4649      	mov	r1, r9
 8004324:	4638      	mov	r0, r7
 8004326:	47c0      	blx	r8
 8004328:	3001      	adds	r0, #1
 800432a:	d103      	bne.n	8004334 <_printf_common+0xac>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004334:	3501      	adds	r5, #1
 8004336:	e7c6      	b.n	80042c6 <_printf_common+0x3e>
 8004338:	18e1      	adds	r1, r4, r3
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	2030      	movs	r0, #48	; 0x30
 800433e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004342:	4422      	add	r2, r4
 8004344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800434c:	3302      	adds	r3, #2
 800434e:	e7c7      	b.n	80042e0 <_printf_common+0x58>
 8004350:	2301      	movs	r3, #1
 8004352:	4622      	mov	r2, r4
 8004354:	4649      	mov	r1, r9
 8004356:	4638      	mov	r0, r7
 8004358:	47c0      	blx	r8
 800435a:	3001      	adds	r0, #1
 800435c:	d0e6      	beq.n	800432c <_printf_common+0xa4>
 800435e:	3601      	adds	r6, #1
 8004360:	e7d9      	b.n	8004316 <_printf_common+0x8e>
	...

08004364 <_printf_i>:
 8004364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	7e0f      	ldrb	r7, [r1, #24]
 800436a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800436c:	2f78      	cmp	r7, #120	; 0x78
 800436e:	4691      	mov	r9, r2
 8004370:	4680      	mov	r8, r0
 8004372:	460c      	mov	r4, r1
 8004374:	469a      	mov	sl, r3
 8004376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800437a:	d807      	bhi.n	800438c <_printf_i+0x28>
 800437c:	2f62      	cmp	r7, #98	; 0x62
 800437e:	d80a      	bhi.n	8004396 <_printf_i+0x32>
 8004380:	2f00      	cmp	r7, #0
 8004382:	f000 80d8 	beq.w	8004536 <_printf_i+0x1d2>
 8004386:	2f58      	cmp	r7, #88	; 0x58
 8004388:	f000 80a3 	beq.w	80044d2 <_printf_i+0x16e>
 800438c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004394:	e03a      	b.n	800440c <_printf_i+0xa8>
 8004396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800439a:	2b15      	cmp	r3, #21
 800439c:	d8f6      	bhi.n	800438c <_printf_i+0x28>
 800439e:	a101      	add	r1, pc, #4	; (adr r1, 80043a4 <_printf_i+0x40>)
 80043a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	08004411 	.word	0x08004411
 80043ac:	0800438d 	.word	0x0800438d
 80043b0:	0800438d 	.word	0x0800438d
 80043b4:	0800438d 	.word	0x0800438d
 80043b8:	0800438d 	.word	0x0800438d
 80043bc:	08004411 	.word	0x08004411
 80043c0:	0800438d 	.word	0x0800438d
 80043c4:	0800438d 	.word	0x0800438d
 80043c8:	0800438d 	.word	0x0800438d
 80043cc:	0800438d 	.word	0x0800438d
 80043d0:	0800451d 	.word	0x0800451d
 80043d4:	08004441 	.word	0x08004441
 80043d8:	080044ff 	.word	0x080044ff
 80043dc:	0800438d 	.word	0x0800438d
 80043e0:	0800438d 	.word	0x0800438d
 80043e4:	0800453f 	.word	0x0800453f
 80043e8:	0800438d 	.word	0x0800438d
 80043ec:	08004441 	.word	0x08004441
 80043f0:	0800438d 	.word	0x0800438d
 80043f4:	0800438d 	.word	0x0800438d
 80043f8:	08004507 	.word	0x08004507
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	1d1a      	adds	r2, r3, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	602a      	str	r2, [r5, #0]
 8004404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800440c:	2301      	movs	r3, #1
 800440e:	e0a3      	b.n	8004558 <_printf_i+0x1f4>
 8004410:	6820      	ldr	r0, [r4, #0]
 8004412:	6829      	ldr	r1, [r5, #0]
 8004414:	0606      	lsls	r6, r0, #24
 8004416:	f101 0304 	add.w	r3, r1, #4
 800441a:	d50a      	bpl.n	8004432 <_printf_i+0xce>
 800441c:	680e      	ldr	r6, [r1, #0]
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	2e00      	cmp	r6, #0
 8004422:	da03      	bge.n	800442c <_printf_i+0xc8>
 8004424:	232d      	movs	r3, #45	; 0x2d
 8004426:	4276      	negs	r6, r6
 8004428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442c:	485e      	ldr	r0, [pc, #376]	; (80045a8 <_printf_i+0x244>)
 800442e:	230a      	movs	r3, #10
 8004430:	e019      	b.n	8004466 <_printf_i+0x102>
 8004432:	680e      	ldr	r6, [r1, #0]
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	f010 0f40 	tst.w	r0, #64	; 0x40
 800443a:	bf18      	it	ne
 800443c:	b236      	sxthne	r6, r6
 800443e:	e7ef      	b.n	8004420 <_printf_i+0xbc>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	1d19      	adds	r1, r3, #4
 8004446:	6029      	str	r1, [r5, #0]
 8004448:	0601      	lsls	r1, r0, #24
 800444a:	d501      	bpl.n	8004450 <_printf_i+0xec>
 800444c:	681e      	ldr	r6, [r3, #0]
 800444e:	e002      	b.n	8004456 <_printf_i+0xf2>
 8004450:	0646      	lsls	r6, r0, #25
 8004452:	d5fb      	bpl.n	800444c <_printf_i+0xe8>
 8004454:	881e      	ldrh	r6, [r3, #0]
 8004456:	4854      	ldr	r0, [pc, #336]	; (80045a8 <_printf_i+0x244>)
 8004458:	2f6f      	cmp	r7, #111	; 0x6f
 800445a:	bf0c      	ite	eq
 800445c:	2308      	moveq	r3, #8
 800445e:	230a      	movne	r3, #10
 8004460:	2100      	movs	r1, #0
 8004462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004466:	6865      	ldr	r5, [r4, #4]
 8004468:	60a5      	str	r5, [r4, #8]
 800446a:	2d00      	cmp	r5, #0
 800446c:	bfa2      	ittt	ge
 800446e:	6821      	ldrge	r1, [r4, #0]
 8004470:	f021 0104 	bicge.w	r1, r1, #4
 8004474:	6021      	strge	r1, [r4, #0]
 8004476:	b90e      	cbnz	r6, 800447c <_printf_i+0x118>
 8004478:	2d00      	cmp	r5, #0
 800447a:	d04d      	beq.n	8004518 <_printf_i+0x1b4>
 800447c:	4615      	mov	r5, r2
 800447e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004482:	fb03 6711 	mls	r7, r3, r1, r6
 8004486:	5dc7      	ldrb	r7, [r0, r7]
 8004488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800448c:	4637      	mov	r7, r6
 800448e:	42bb      	cmp	r3, r7
 8004490:	460e      	mov	r6, r1
 8004492:	d9f4      	bls.n	800447e <_printf_i+0x11a>
 8004494:	2b08      	cmp	r3, #8
 8004496:	d10b      	bne.n	80044b0 <_printf_i+0x14c>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	07de      	lsls	r6, r3, #31
 800449c:	d508      	bpl.n	80044b0 <_printf_i+0x14c>
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	6861      	ldr	r1, [r4, #4]
 80044a2:	4299      	cmp	r1, r3
 80044a4:	bfde      	ittt	le
 80044a6:	2330      	movle	r3, #48	; 0x30
 80044a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044b0:	1b52      	subs	r2, r2, r5
 80044b2:	6122      	str	r2, [r4, #16]
 80044b4:	f8cd a000 	str.w	sl, [sp]
 80044b8:	464b      	mov	r3, r9
 80044ba:	aa03      	add	r2, sp, #12
 80044bc:	4621      	mov	r1, r4
 80044be:	4640      	mov	r0, r8
 80044c0:	f7ff fee2 	bl	8004288 <_printf_common>
 80044c4:	3001      	adds	r0, #1
 80044c6:	d14c      	bne.n	8004562 <_printf_i+0x1fe>
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295
 80044cc:	b004      	add	sp, #16
 80044ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d2:	4835      	ldr	r0, [pc, #212]	; (80045a8 <_printf_i+0x244>)
 80044d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044d8:	6829      	ldr	r1, [r5, #0]
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80044e0:	6029      	str	r1, [r5, #0]
 80044e2:	061d      	lsls	r5, r3, #24
 80044e4:	d514      	bpl.n	8004510 <_printf_i+0x1ac>
 80044e6:	07df      	lsls	r7, r3, #31
 80044e8:	bf44      	itt	mi
 80044ea:	f043 0320 	orrmi.w	r3, r3, #32
 80044ee:	6023      	strmi	r3, [r4, #0]
 80044f0:	b91e      	cbnz	r6, 80044fa <_printf_i+0x196>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	f023 0320 	bic.w	r3, r3, #32
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	2310      	movs	r3, #16
 80044fc:	e7b0      	b.n	8004460 <_printf_i+0xfc>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	f043 0320 	orr.w	r3, r3, #32
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	2378      	movs	r3, #120	; 0x78
 8004508:	4828      	ldr	r0, [pc, #160]	; (80045ac <_printf_i+0x248>)
 800450a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800450e:	e7e3      	b.n	80044d8 <_printf_i+0x174>
 8004510:	0659      	lsls	r1, r3, #25
 8004512:	bf48      	it	mi
 8004514:	b2b6      	uxthmi	r6, r6
 8004516:	e7e6      	b.n	80044e6 <_printf_i+0x182>
 8004518:	4615      	mov	r5, r2
 800451a:	e7bb      	b.n	8004494 <_printf_i+0x130>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	6826      	ldr	r6, [r4, #0]
 8004520:	6961      	ldr	r1, [r4, #20]
 8004522:	1d18      	adds	r0, r3, #4
 8004524:	6028      	str	r0, [r5, #0]
 8004526:	0635      	lsls	r5, r6, #24
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	d501      	bpl.n	8004530 <_printf_i+0x1cc>
 800452c:	6019      	str	r1, [r3, #0]
 800452e:	e002      	b.n	8004536 <_printf_i+0x1d2>
 8004530:	0670      	lsls	r0, r6, #25
 8004532:	d5fb      	bpl.n	800452c <_printf_i+0x1c8>
 8004534:	8019      	strh	r1, [r3, #0]
 8004536:	2300      	movs	r3, #0
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	4615      	mov	r5, r2
 800453c:	e7ba      	b.n	80044b4 <_printf_i+0x150>
 800453e:	682b      	ldr	r3, [r5, #0]
 8004540:	1d1a      	adds	r2, r3, #4
 8004542:	602a      	str	r2, [r5, #0]
 8004544:	681d      	ldr	r5, [r3, #0]
 8004546:	6862      	ldr	r2, [r4, #4]
 8004548:	2100      	movs	r1, #0
 800454a:	4628      	mov	r0, r5
 800454c:	f7fb fe48 	bl	80001e0 <memchr>
 8004550:	b108      	cbz	r0, 8004556 <_printf_i+0x1f2>
 8004552:	1b40      	subs	r0, r0, r5
 8004554:	6060      	str	r0, [r4, #4]
 8004556:	6863      	ldr	r3, [r4, #4]
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	2300      	movs	r3, #0
 800455c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004560:	e7a8      	b.n	80044b4 <_printf_i+0x150>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	462a      	mov	r2, r5
 8004566:	4649      	mov	r1, r9
 8004568:	4640      	mov	r0, r8
 800456a:	47d0      	blx	sl
 800456c:	3001      	adds	r0, #1
 800456e:	d0ab      	beq.n	80044c8 <_printf_i+0x164>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	079b      	lsls	r3, r3, #30
 8004574:	d413      	bmi.n	800459e <_printf_i+0x23a>
 8004576:	68e0      	ldr	r0, [r4, #12]
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	4298      	cmp	r0, r3
 800457c:	bfb8      	it	lt
 800457e:	4618      	movlt	r0, r3
 8004580:	e7a4      	b.n	80044cc <_printf_i+0x168>
 8004582:	2301      	movs	r3, #1
 8004584:	4632      	mov	r2, r6
 8004586:	4649      	mov	r1, r9
 8004588:	4640      	mov	r0, r8
 800458a:	47d0      	blx	sl
 800458c:	3001      	adds	r0, #1
 800458e:	d09b      	beq.n	80044c8 <_printf_i+0x164>
 8004590:	3501      	adds	r5, #1
 8004592:	68e3      	ldr	r3, [r4, #12]
 8004594:	9903      	ldr	r1, [sp, #12]
 8004596:	1a5b      	subs	r3, r3, r1
 8004598:	42ab      	cmp	r3, r5
 800459a:	dcf2      	bgt.n	8004582 <_printf_i+0x21e>
 800459c:	e7eb      	b.n	8004576 <_printf_i+0x212>
 800459e:	2500      	movs	r5, #0
 80045a0:	f104 0619 	add.w	r6, r4, #25
 80045a4:	e7f5      	b.n	8004592 <_printf_i+0x22e>
 80045a6:	bf00      	nop
 80045a8:	08004c85 	.word	0x08004c85
 80045ac:	08004c96 	.word	0x08004c96

080045b0 <memcpy>:
 80045b0:	440a      	add	r2, r1
 80045b2:	4291      	cmp	r1, r2
 80045b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045b8:	d100      	bne.n	80045bc <memcpy+0xc>
 80045ba:	4770      	bx	lr
 80045bc:	b510      	push	{r4, lr}
 80045be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045c6:	4291      	cmp	r1, r2
 80045c8:	d1f9      	bne.n	80045be <memcpy+0xe>
 80045ca:	bd10      	pop	{r4, pc}

080045cc <memmove>:
 80045cc:	4288      	cmp	r0, r1
 80045ce:	b510      	push	{r4, lr}
 80045d0:	eb01 0402 	add.w	r4, r1, r2
 80045d4:	d902      	bls.n	80045dc <memmove+0x10>
 80045d6:	4284      	cmp	r4, r0
 80045d8:	4623      	mov	r3, r4
 80045da:	d807      	bhi.n	80045ec <memmove+0x20>
 80045dc:	1e43      	subs	r3, r0, #1
 80045de:	42a1      	cmp	r1, r4
 80045e0:	d008      	beq.n	80045f4 <memmove+0x28>
 80045e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045ea:	e7f8      	b.n	80045de <memmove+0x12>
 80045ec:	4402      	add	r2, r0
 80045ee:	4601      	mov	r1, r0
 80045f0:	428a      	cmp	r2, r1
 80045f2:	d100      	bne.n	80045f6 <memmove+0x2a>
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045fe:	e7f7      	b.n	80045f0 <memmove+0x24>

08004600 <_free_r>:
 8004600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004602:	2900      	cmp	r1, #0
 8004604:	d044      	beq.n	8004690 <_free_r+0x90>
 8004606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800460a:	9001      	str	r0, [sp, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f1a1 0404 	sub.w	r4, r1, #4
 8004612:	bfb8      	it	lt
 8004614:	18e4      	addlt	r4, r4, r3
 8004616:	f000 f913 	bl	8004840 <__malloc_lock>
 800461a:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <_free_r+0x94>)
 800461c:	9801      	ldr	r0, [sp, #4]
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	b933      	cbnz	r3, 8004630 <_free_r+0x30>
 8004622:	6063      	str	r3, [r4, #4]
 8004624:	6014      	str	r4, [r2, #0]
 8004626:	b003      	add	sp, #12
 8004628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800462c:	f000 b90e 	b.w	800484c <__malloc_unlock>
 8004630:	42a3      	cmp	r3, r4
 8004632:	d908      	bls.n	8004646 <_free_r+0x46>
 8004634:	6825      	ldr	r5, [r4, #0]
 8004636:	1961      	adds	r1, r4, r5
 8004638:	428b      	cmp	r3, r1
 800463a:	bf01      	itttt	eq
 800463c:	6819      	ldreq	r1, [r3, #0]
 800463e:	685b      	ldreq	r3, [r3, #4]
 8004640:	1949      	addeq	r1, r1, r5
 8004642:	6021      	streq	r1, [r4, #0]
 8004644:	e7ed      	b.n	8004622 <_free_r+0x22>
 8004646:	461a      	mov	r2, r3
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	b10b      	cbz	r3, 8004650 <_free_r+0x50>
 800464c:	42a3      	cmp	r3, r4
 800464e:	d9fa      	bls.n	8004646 <_free_r+0x46>
 8004650:	6811      	ldr	r1, [r2, #0]
 8004652:	1855      	adds	r5, r2, r1
 8004654:	42a5      	cmp	r5, r4
 8004656:	d10b      	bne.n	8004670 <_free_r+0x70>
 8004658:	6824      	ldr	r4, [r4, #0]
 800465a:	4421      	add	r1, r4
 800465c:	1854      	adds	r4, r2, r1
 800465e:	42a3      	cmp	r3, r4
 8004660:	6011      	str	r1, [r2, #0]
 8004662:	d1e0      	bne.n	8004626 <_free_r+0x26>
 8004664:	681c      	ldr	r4, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	6053      	str	r3, [r2, #4]
 800466a:	4421      	add	r1, r4
 800466c:	6011      	str	r1, [r2, #0]
 800466e:	e7da      	b.n	8004626 <_free_r+0x26>
 8004670:	d902      	bls.n	8004678 <_free_r+0x78>
 8004672:	230c      	movs	r3, #12
 8004674:	6003      	str	r3, [r0, #0]
 8004676:	e7d6      	b.n	8004626 <_free_r+0x26>
 8004678:	6825      	ldr	r5, [r4, #0]
 800467a:	1961      	adds	r1, r4, r5
 800467c:	428b      	cmp	r3, r1
 800467e:	bf04      	itt	eq
 8004680:	6819      	ldreq	r1, [r3, #0]
 8004682:	685b      	ldreq	r3, [r3, #4]
 8004684:	6063      	str	r3, [r4, #4]
 8004686:	bf04      	itt	eq
 8004688:	1949      	addeq	r1, r1, r5
 800468a:	6021      	streq	r1, [r4, #0]
 800468c:	6054      	str	r4, [r2, #4]
 800468e:	e7ca      	b.n	8004626 <_free_r+0x26>
 8004690:	b003      	add	sp, #12
 8004692:	bd30      	pop	{r4, r5, pc}
 8004694:	2000079c 	.word	0x2000079c

08004698 <sbrk_aligned>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	4e0e      	ldr	r6, [pc, #56]	; (80046d4 <sbrk_aligned+0x3c>)
 800469c:	460c      	mov	r4, r1
 800469e:	6831      	ldr	r1, [r6, #0]
 80046a0:	4605      	mov	r5, r0
 80046a2:	b911      	cbnz	r1, 80046aa <sbrk_aligned+0x12>
 80046a4:	f000 f8bc 	bl	8004820 <_sbrk_r>
 80046a8:	6030      	str	r0, [r6, #0]
 80046aa:	4621      	mov	r1, r4
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 f8b7 	bl	8004820 <_sbrk_r>
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	d00a      	beq.n	80046cc <sbrk_aligned+0x34>
 80046b6:	1cc4      	adds	r4, r0, #3
 80046b8:	f024 0403 	bic.w	r4, r4, #3
 80046bc:	42a0      	cmp	r0, r4
 80046be:	d007      	beq.n	80046d0 <sbrk_aligned+0x38>
 80046c0:	1a21      	subs	r1, r4, r0
 80046c2:	4628      	mov	r0, r5
 80046c4:	f000 f8ac 	bl	8004820 <_sbrk_r>
 80046c8:	3001      	adds	r0, #1
 80046ca:	d101      	bne.n	80046d0 <sbrk_aligned+0x38>
 80046cc:	f04f 34ff 	mov.w	r4, #4294967295
 80046d0:	4620      	mov	r0, r4
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	200007a0 	.word	0x200007a0

080046d8 <_malloc_r>:
 80046d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046dc:	1ccd      	adds	r5, r1, #3
 80046de:	f025 0503 	bic.w	r5, r5, #3
 80046e2:	3508      	adds	r5, #8
 80046e4:	2d0c      	cmp	r5, #12
 80046e6:	bf38      	it	cc
 80046e8:	250c      	movcc	r5, #12
 80046ea:	2d00      	cmp	r5, #0
 80046ec:	4607      	mov	r7, r0
 80046ee:	db01      	blt.n	80046f4 <_malloc_r+0x1c>
 80046f0:	42a9      	cmp	r1, r5
 80046f2:	d905      	bls.n	8004700 <_malloc_r+0x28>
 80046f4:	230c      	movs	r3, #12
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	2600      	movs	r6, #0
 80046fa:	4630      	mov	r0, r6
 80046fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004700:	4e2e      	ldr	r6, [pc, #184]	; (80047bc <_malloc_r+0xe4>)
 8004702:	f000 f89d 	bl	8004840 <__malloc_lock>
 8004706:	6833      	ldr	r3, [r6, #0]
 8004708:	461c      	mov	r4, r3
 800470a:	bb34      	cbnz	r4, 800475a <_malloc_r+0x82>
 800470c:	4629      	mov	r1, r5
 800470e:	4638      	mov	r0, r7
 8004710:	f7ff ffc2 	bl	8004698 <sbrk_aligned>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	4604      	mov	r4, r0
 8004718:	d14d      	bne.n	80047b6 <_malloc_r+0xde>
 800471a:	6834      	ldr	r4, [r6, #0]
 800471c:	4626      	mov	r6, r4
 800471e:	2e00      	cmp	r6, #0
 8004720:	d140      	bne.n	80047a4 <_malloc_r+0xcc>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	4631      	mov	r1, r6
 8004726:	4638      	mov	r0, r7
 8004728:	eb04 0803 	add.w	r8, r4, r3
 800472c:	f000 f878 	bl	8004820 <_sbrk_r>
 8004730:	4580      	cmp	r8, r0
 8004732:	d13a      	bne.n	80047aa <_malloc_r+0xd2>
 8004734:	6821      	ldr	r1, [r4, #0]
 8004736:	3503      	adds	r5, #3
 8004738:	1a6d      	subs	r5, r5, r1
 800473a:	f025 0503 	bic.w	r5, r5, #3
 800473e:	3508      	adds	r5, #8
 8004740:	2d0c      	cmp	r5, #12
 8004742:	bf38      	it	cc
 8004744:	250c      	movcc	r5, #12
 8004746:	4629      	mov	r1, r5
 8004748:	4638      	mov	r0, r7
 800474a:	f7ff ffa5 	bl	8004698 <sbrk_aligned>
 800474e:	3001      	adds	r0, #1
 8004750:	d02b      	beq.n	80047aa <_malloc_r+0xd2>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	442b      	add	r3, r5
 8004756:	6023      	str	r3, [r4, #0]
 8004758:	e00e      	b.n	8004778 <_malloc_r+0xa0>
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	1b52      	subs	r2, r2, r5
 800475e:	d41e      	bmi.n	800479e <_malloc_r+0xc6>
 8004760:	2a0b      	cmp	r2, #11
 8004762:	d916      	bls.n	8004792 <_malloc_r+0xba>
 8004764:	1961      	adds	r1, r4, r5
 8004766:	42a3      	cmp	r3, r4
 8004768:	6025      	str	r5, [r4, #0]
 800476a:	bf18      	it	ne
 800476c:	6059      	strne	r1, [r3, #4]
 800476e:	6863      	ldr	r3, [r4, #4]
 8004770:	bf08      	it	eq
 8004772:	6031      	streq	r1, [r6, #0]
 8004774:	5162      	str	r2, [r4, r5]
 8004776:	604b      	str	r3, [r1, #4]
 8004778:	4638      	mov	r0, r7
 800477a:	f104 060b 	add.w	r6, r4, #11
 800477e:	f000 f865 	bl	800484c <__malloc_unlock>
 8004782:	f026 0607 	bic.w	r6, r6, #7
 8004786:	1d23      	adds	r3, r4, #4
 8004788:	1af2      	subs	r2, r6, r3
 800478a:	d0b6      	beq.n	80046fa <_malloc_r+0x22>
 800478c:	1b9b      	subs	r3, r3, r6
 800478e:	50a3      	str	r3, [r4, r2]
 8004790:	e7b3      	b.n	80046fa <_malloc_r+0x22>
 8004792:	6862      	ldr	r2, [r4, #4]
 8004794:	42a3      	cmp	r3, r4
 8004796:	bf0c      	ite	eq
 8004798:	6032      	streq	r2, [r6, #0]
 800479a:	605a      	strne	r2, [r3, #4]
 800479c:	e7ec      	b.n	8004778 <_malloc_r+0xa0>
 800479e:	4623      	mov	r3, r4
 80047a0:	6864      	ldr	r4, [r4, #4]
 80047a2:	e7b2      	b.n	800470a <_malloc_r+0x32>
 80047a4:	4634      	mov	r4, r6
 80047a6:	6876      	ldr	r6, [r6, #4]
 80047a8:	e7b9      	b.n	800471e <_malloc_r+0x46>
 80047aa:	230c      	movs	r3, #12
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4638      	mov	r0, r7
 80047b0:	f000 f84c 	bl	800484c <__malloc_unlock>
 80047b4:	e7a1      	b.n	80046fa <_malloc_r+0x22>
 80047b6:	6025      	str	r5, [r4, #0]
 80047b8:	e7de      	b.n	8004778 <_malloc_r+0xa0>
 80047ba:	bf00      	nop
 80047bc:	2000079c 	.word	0x2000079c

080047c0 <_realloc_r>:
 80047c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c4:	4680      	mov	r8, r0
 80047c6:	4614      	mov	r4, r2
 80047c8:	460e      	mov	r6, r1
 80047ca:	b921      	cbnz	r1, 80047d6 <_realloc_r+0x16>
 80047cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047d0:	4611      	mov	r1, r2
 80047d2:	f7ff bf81 	b.w	80046d8 <_malloc_r>
 80047d6:	b92a      	cbnz	r2, 80047e4 <_realloc_r+0x24>
 80047d8:	f7ff ff12 	bl	8004600 <_free_r>
 80047dc:	4625      	mov	r5, r4
 80047de:	4628      	mov	r0, r5
 80047e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e4:	f000 f838 	bl	8004858 <_malloc_usable_size_r>
 80047e8:	4284      	cmp	r4, r0
 80047ea:	4607      	mov	r7, r0
 80047ec:	d802      	bhi.n	80047f4 <_realloc_r+0x34>
 80047ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047f2:	d812      	bhi.n	800481a <_realloc_r+0x5a>
 80047f4:	4621      	mov	r1, r4
 80047f6:	4640      	mov	r0, r8
 80047f8:	f7ff ff6e 	bl	80046d8 <_malloc_r>
 80047fc:	4605      	mov	r5, r0
 80047fe:	2800      	cmp	r0, #0
 8004800:	d0ed      	beq.n	80047de <_realloc_r+0x1e>
 8004802:	42bc      	cmp	r4, r7
 8004804:	4622      	mov	r2, r4
 8004806:	4631      	mov	r1, r6
 8004808:	bf28      	it	cs
 800480a:	463a      	movcs	r2, r7
 800480c:	f7ff fed0 	bl	80045b0 <memcpy>
 8004810:	4631      	mov	r1, r6
 8004812:	4640      	mov	r0, r8
 8004814:	f7ff fef4 	bl	8004600 <_free_r>
 8004818:	e7e1      	b.n	80047de <_realloc_r+0x1e>
 800481a:	4635      	mov	r5, r6
 800481c:	e7df      	b.n	80047de <_realloc_r+0x1e>
	...

08004820 <_sbrk_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d06      	ldr	r5, [pc, #24]	; (800483c <_sbrk_r+0x1c>)
 8004824:	2300      	movs	r3, #0
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	f000 f81e 	bl	800486c <_sbrk>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_sbrk_r+0x1a>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_sbrk_r+0x1a>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	200007a4 	.word	0x200007a4

08004840 <__malloc_lock>:
 8004840:	4801      	ldr	r0, [pc, #4]	; (8004848 <__malloc_lock+0x8>)
 8004842:	f000 b811 	b.w	8004868 <__retarget_lock_acquire_recursive>
 8004846:	bf00      	nop
 8004848:	200007a8 	.word	0x200007a8

0800484c <__malloc_unlock>:
 800484c:	4801      	ldr	r0, [pc, #4]	; (8004854 <__malloc_unlock+0x8>)
 800484e:	f000 b80c 	b.w	800486a <__retarget_lock_release_recursive>
 8004852:	bf00      	nop
 8004854:	200007a8 	.word	0x200007a8

08004858 <_malloc_usable_size_r>:
 8004858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485c:	1f18      	subs	r0, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfbc      	itt	lt
 8004862:	580b      	ldrlt	r3, [r1, r0]
 8004864:	18c0      	addlt	r0, r0, r3
 8004866:	4770      	bx	lr

08004868 <__retarget_lock_acquire_recursive>:
 8004868:	4770      	bx	lr

0800486a <__retarget_lock_release_recursive>:
 800486a:	4770      	bx	lr

0800486c <_sbrk>:
 800486c:	4a04      	ldr	r2, [pc, #16]	; (8004880 <_sbrk+0x14>)
 800486e:	6811      	ldr	r1, [r2, #0]
 8004870:	4603      	mov	r3, r0
 8004872:	b909      	cbnz	r1, 8004878 <_sbrk+0xc>
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <_sbrk+0x18>)
 8004876:	6011      	str	r1, [r2, #0]
 8004878:	6810      	ldr	r0, [r2, #0]
 800487a:	4403      	add	r3, r0
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4770      	bx	lr
 8004880:	200007ac 	.word	0x200007ac
 8004884:	200007b0 	.word	0x200007b0

08004888 <_init>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr

08004894 <_fini>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr
